<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>311周赛总结</title>
      <link href="2022/09/18/311%E5%91%A8%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
      <url>2022/09/18/311%E5%91%A8%E8%B5%9B%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="1-最小偶倍数"><a href="#1-最小偶倍数" class="headerlink" title="1. 最小偶倍数"></a>1. <a href="https://leetcode.cn/contest/weekly-contest-311/problems/smallest-even-multiple/">最小偶倍数</a></h3><p>直接计算，当n为奇数时，结果为2*n, 否则为n</p><a id="more"></a><pre class=" language-python3"><code class="language-python3">class Solution:    def smallestEvenMultiple(self, n: int) -> int:        if n % 2 == 0:            return n         return n * 2</code></pre><hr><h3 id="2-最长的字母序连续子字符串的长度"><a href="#2-最长的字母序连续子字符串的长度" class="headerlink" title="2. 最长的字母序连续子字符串的长度"></a>2. <a href="https://leetcode.cn/contest/weekly-contest-311/problems/length-of-the-longest-alphabetical-continuous-substring/">最长的字母序连续子字符串的长度</a></h3><p><code>滑动窗口</code></p><pre class=" language-python3"><code class="language-python3">class Solution:    def longestContinuousSubstring(self, s: str) -> int:        res = 1        cur = 1        for i in range(1, len(s)):            ch = s[i]            if ord(ch) - ord(s[i-1]) == 1:                cur += 1            else:                cur = 1            res = max(res, cur)        return res</code></pre><hr><h3 id="3-反转二叉树的奇数层"><a href="#3-反转二叉树的奇数层" class="headerlink" title="3. 反转二叉树的奇数层"></a>3. <a href="https://leetcode.cn/contest/weekly-contest-311/problems/reverse-odd-levels-of-binary-tree/">反转二叉树的奇数层</a></h3><p><code>BFS</code>, 遍历时记录所在层数，当为奇数层时，反转奇数层的节点值</p><pre class=" language-python3"><code class="language-python3"># Definition for a binary tree node.# class TreeNode:#     def __init__(self, val=0, left=None, right=None):#         self.val = val#         self.left = left#         self.right = rightclass Solution:    def reverseOddLevels(self, root: Optional[TreeNode]) -> Optional[TreeNode]:        queue = deque()        queue.append(root)        deep = 0        while queue:            size = len(queue)            if deep % 2 != 0:                for i in range(size // 2):                    queue[i].val, queue[size-1-i].val = queue[size-1-i].val, queue[i].val            for i in range(size):                cur = queue.popleft()                if cur.left:                    queue.append(cur.left)                    queue.append(cur.right)            deep += 1        return root</code></pre><hr><h3 id="4-字符串的前缀分数和"><a href="#4-字符串的前缀分数和" class="headerlink" title="4. 字符串的前缀分数和"></a>4. <a href="https://leetcode.cn/contest/weekly-contest-311/problems/sum-of-prefix-scores-of-strings/">字符串的前缀分数和</a></h3><p><code>Hash暴力</code></p><pre class=" language-python3"><code class="language-python3">class Solution:    def sumPrefixScores(self, words: List[str]) -> List[int]:        word_dict = defaultdict(int)        n = len(words)        for word in words:            cur = ""            for w in word:                cur += w                word_dict[cur] += 1        res = [0] * n        for i, word in enumerate(words):            cur = ""            for w in word:                cur += w                res[i] += word_dict[cur]        return res</code></pre>]]></content>
      
      
      <categories>
          
          <category> 周赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>87双周赛总结</title>
      <link href="2022/09/18/87%E5%9C%BA%E5%8F%8C%E5%91%A8%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
      <url>2022/09/18/87%E5%9C%BA%E5%8F%8C%E5%91%A8%E8%B5%9B%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="1-统计共同度过的日子数"><a href="#1-统计共同度过的日子数" class="headerlink" title="1. 统计共同度过的日子数"></a>1. <a href="https://leetcode.cn/contest/biweekly-contest-87/problems/count-days-spent-together/">统计共同度过的日子数</a></h3><p><code>数组计数</code>, 使用数组将Alice和Bob所在天+1, 统计为2的天数</p><a id="more"></a><pre class=" language-python3"><code class="language-python3">class Solution:    def countDaysTogether(self, arriveAlice: str, leaveAlice: str, arriveBob: str, leaveBob: str) -> int:        month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]        arriveAlice = [int(a) for a in arriveAlice.split("-")]        arriveBob = [int(a) for a in arriveBob.split("-")]        leaveAlice = [int(a) for a in leaveAlice.split("-")]        leaveBob = [int(a) for a in leaveBob.split("-")]        days = [0] * 366        arriveAlice = sum(month[:arriveAlice[0]-1]) + arriveAlice[1]        leaveAlice = sum(month[:leaveAlice[0]-1]) + leaveAlice[1]        arriveBob = sum(month[:arriveBob[0]-1]) + arriveBob[1]        leaveBob = sum(month[:leaveBob[0]-1]) + leaveBob[1]        for i in range(arriveAlice, leaveAlice+1):            days[i] += 1        for i in range(arriveBob, leaveBob+1):            days[i] += 1        res = 0        for day in days:            if day == 2:                res += 1        return res</code></pre><hr><h3 id="2-运动员和训练师的最大匹配数"><a href="#2-运动员和训练师的最大匹配数" class="headerlink" title="2. 运动员和训练师的最大匹配数"></a>2. <a href="https://leetcode.cn/contest/biweekly-contest-87/problems/maximum-matching-of-players-with-trainers/">运动员和训练师的最大匹配数</a></h3><p><code>排序+贪心</code> </p><pre class=" language-python3"><code class="language-python3">class Solution:    def matchPlayersAndTrainers(self, players: List[int], trainers: List[int]) -> int:        players.sort()        trainers.sort()        i = 0        res = 0        for trainer in trainers:            if i < len(players) and trainer >= players[i]:                res += 1                i += 1        return res</code></pre><hr><h3 id="3-按位或最大的最小子数组长度"><a href="#3-按位或最大的最小子数组长度" class="headerlink" title="3. 按位或最大的最小子数组长度"></a>3. <a href="https://leetcode.cn/contest/biweekly-contest-87/problems/smallest-subarrays-with-maximum-bitwise-or/">按位或最大的最小子数组长度</a></h3><pre class=" language-python3"><code class="language-python3"></code></pre><hr><h3 id="4-完成所有交易的初始最少钱数"><a href="#4-完成所有交易的初始最少钱数" class="headerlink" title="4. 完成所有交易的初始最少钱数"></a>4. <a href="https://leetcode.cn/contest/biweekly-contest-87/problems/minimum-money-required-before-transactions/">完成所有交易的初始最少钱数</a></h3><p><code>贪心+枚举</code>， 每次交易所需的最少金额为当前cost加上之前所有负收益的总和，因此可以枚举每次交易，计算最大的钱数。</p><pre class=" language-python3"><code class="language-python3">class Solution:    def minimumMoney(self, transactions: List[List[int]]) -> int:        neg = 0        # 计算所有的负收益        for cost, cashback in transactions:            if cost > cashback:                neg += (cashback-cost)        res = 0        # 枚举所有的交易，至少花费的钱为负收益加当前花费        for cost, cashback in transactions:            # 当前交易为负交易时，需要从总负交易减去当前负交易            if cost > cashback:                cur_neg = neg - (cashback-cost)            else:                cur_neg = neg            res = max(res, cost - cur_neg)        return res</code></pre>]]></content>
      
      
      <categories>
          
          <category> 周赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>310周赛总结</title>
      <link href="2022/09/11/310%E5%91%A8%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
      <url>2022/09/11/310%E5%91%A8%E8%B5%9B%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="1-出现最频繁的偶数元素"><a href="#1-出现最频繁的偶数元素" class="headerlink" title="1. 出现最频繁的偶数元素"></a>1. <a href="https://leetcode.cn/problems/most-frequent-even-element/">出现最频繁的偶数元素</a></h3><p><code>计数</code>, 根据题意直接模拟</p><a id="more"></a><pre class=" language-python3"><code class="language-python3">class Solution:    def mostFrequentEven(self, nums: List[int]) -> int:        num_dict = Counter(nums)        res = -1        times = 0        for num, time in num_dict.items():            if num % 2 != 0:                continue            if time > times:                times = time                res = num            elif time == times and res > num:                res = num        return res</code></pre><hr><h3 id="2-子字符串的最优划分"><a href="#2-子字符串的最优划分" class="headerlink" title="2. 子字符串的最优划分"></a>2. <a href="https://leetcode.cn/problems/optimal-partition-of-string/">子字符串的最优划分</a></h3><p>使用<code>set</code>从头开始遍历，当前值存在于set中时，结果+1，并清空set</p><pre class=" language-python3"><code class="language-python3">class Solution:    def partitionString(self, s: str) -> int:        s_set = set()        res = 0        for ch in s:            if ch in s_set:                res += 1                s_set.clear()            s_set.add(ch)        if len(s_set):            res += 1        return res</code></pre><hr><h3 id="3-将区间分为最少组数"><a href="#3-将区间分为最少组数" class="headerlink" title="3. 将区间分为最少组数"></a>3. <a href="https://leetcode.cn/problems/divide-intervals-into-minimum-number-of-groups/">将区间分为最少组数</a></h3><p><code>排序</code>+<code>堆</code>, 将区间按左端点排序，使用堆保存区间组的最右端点。遍历排序好的区间，当堆的最小右端点小于当前的左端点时，更新堆的最右端点。否则新增右端点，最后返回堆的长度即为组的个数。</p><pre class=" language-python3"><code class="language-python3">class Solution:    def minGroups(self, intervals: List[List[int]]) -> int:        intervals.sort()        h = []        for l, r in (intervals):            if h and l > h[0]:                heapreplace(h, r)            else:                heappush(h, r)        return len(h)</code></pre><hr><h3 id="4-最长递增子序列-II"><a href="#4-最长递增子序列-II" class="headerlink" title="4. 最长递增子序列 II"></a>4. <a href="https://leetcode.cn/problems/longest-increasing-subsequence-ii/">最长递增子序列 II</a></h3><p><code>线段树</code></p>]]></content>
      
      
      <categories>
          
          <category> 周赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 第70场双周赛Python题解</title>
      <link href="2022/01/25/70%E5%9C%BA%E5%8F%8C%E5%91%A8%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
      <url>2022/01/25/70%E5%9C%BA%E5%8F%8C%E5%91%A8%E8%B5%9B%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="1-打折购买糖果的最小开销"><a href="#1-打折购买糖果的最小开销" class="headerlink" title="1 打折购买糖果的最小开销"></a>1 打折购买糖果的最小开销</h2><p><code>排序</code>，倒序每取两个就跳过一个</p><a id="more"></a><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minimumCost</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cost<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        cost<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token number">0</span>        i <span class="token operator">=</span> len<span class="token punctuation">(</span>cost<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            i <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">if</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                i <span class="token operator">-=</span> <span class="token number">1</span>            i <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> res</code></pre><hr><h2 id="2-统计隐藏数组数目"><a href="#2-统计隐藏数组数目" class="headerlink" title="2 统计隐藏数组数目"></a>2 统计隐藏数组数目</h2><p><code>前缀和</code>，找到最大最小值，并判断在low到up区间上，加上最大最小值是否在还符合在low到up区间</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numberOfArrays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> differences<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> lower<span class="token punctuation">:</span> int<span class="token punctuation">,</span> upper<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>differences<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            differences<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> differences<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> differences<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>        max_num <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10000001</span>        min_num <span class="token operator">=</span> <span class="token number">10000001</span>        <span class="token keyword">for</span> difference <span class="token keyword">in</span> differences<span class="token punctuation">:</span>            max_num <span class="token operator">=</span> max<span class="token punctuation">(</span>max_num<span class="token punctuation">,</span> difference<span class="token punctuation">)</span>            min_num <span class="token operator">=</span> min<span class="token punctuation">(</span>min_num<span class="token punctuation">,</span> difference<span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>lower<span class="token punctuation">,</span> upper <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">+</span> min_num <span class="token operator">>=</span> lower <span class="token operator">and</span> i <span class="token operator">+</span> max_num <span class="token operator">&lt;=</span> upper<span class="token punctuation">:</span>                res <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> res</code></pre><hr><h2 id="3-价格范围内最高排名的K样物品"><a href="#3-价格范围内最高排名的K样物品" class="headerlink" title="3 价格范围内最高排名的K样物品"></a>3 价格范围内最高排名的K样物品</h2><p><code>BFS</code>加<code>自定义排序</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">highestRankedKItems</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pricing<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>        List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        queue <span class="token operator">=</span> <span class="token punctuation">[</span>start<span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        m<span class="token punctuation">,</span> n <span class="token operator">=</span> len<span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        used <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>        used<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">(</span>start<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> queue<span class="token punctuation">:</span>            next <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            cur <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> node <span class="token keyword">in</span> queue<span class="token punctuation">:</span>                row <span class="token operator">=</span> node<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                col <span class="token operator">=</span> node<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>                <span class="token keyword">for</span> xi<span class="token punctuation">,</span> yi <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> row <span class="token operator">+</span> xi <span class="token operator">&lt;</span> m <span class="token operator">and</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> col <span class="token operator">+</span> yi <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>                        <span class="token keyword">if</span> grid<span class="token punctuation">[</span>row <span class="token operator">+</span> xi<span class="token punctuation">]</span><span class="token punctuation">[</span>col <span class="token operator">+</span> yi<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">and</span> <span class="token punctuation">(</span>row <span class="token operator">+</span> xi<span class="token punctuation">,</span> col <span class="token operator">+</span> yi<span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token keyword">in</span> used<span class="token punctuation">:</span>                            used<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">(</span>row <span class="token operator">+</span> xi<span class="token punctuation">,</span> col <span class="token operator">+</span> yi<span class="token punctuation">)</span><span class="token punctuation">)</span>                            next<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>row <span class="token operator">+</span> xi<span class="token punctuation">,</span> col <span class="token operator">+</span> yi<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> pricing<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> grid<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pricing<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    cur<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>grid<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">]</span><span class="token punctuation">)</span>            cur<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">while</span> cur <span class="token operator">and</span> k<span class="token punctuation">:</span>                node <span class="token operator">=</span> cur<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>node<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> node<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                k <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> res            queue <span class="token operator">=</span> next        <span class="token keyword">return</span> res</code></pre><hr><h2 id="4-分隔长廊的方案数"><a href="#4-分隔长廊的方案数" class="headerlink" title="4 分隔长廊的方案数"></a>4 分隔长廊的方案数</h2><p><code>模拟</code>，只需考虑”S”的位置，并计算一组的后一个S位置到后一组的前一个S位置的距离，距离结果相乘。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numberOfWays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> corridor<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        seat_index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>corridor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> corridor<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'S'</span><span class="token punctuation">:</span>                seat_index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>index<span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>seat_index<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">or</span> len<span class="token punctuation">(</span>seat_index<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        res<span class="token punctuation">,</span> MOD <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">**</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">7</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>seat_index<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">*=</span> <span class="token punctuation">(</span>seat_index<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> seat_index<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            res <span class="token operator">%=</span> MOD        <span class="token keyword">return</span> res</code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka三节点集群搭建</title>
      <link href="2022/01/10/Kafka%E4%B8%89%E8%8A%82%E7%82%B9%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
      <url>2022/01/10/Kafka%E4%B8%89%E8%8A%82%E7%82%B9%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="一-整体步骤"><a href="#一-整体步骤" class="headerlink" title="一 整体步骤"></a>一 整体步骤</h2><ul><li>hosts配置</li><li>安装配置Zookeeper</li><li>Kafka集群搭建</li></ul><a id="more"></a><h2 id="二-配置Hosts"><a href="#二-配置Hosts" class="headerlink" title="二 配置Hosts"></a>二 配置Hosts</h2><ul><li><p>修改hosts文件</p><pre class=" language-shell"><code class="language-shell">sudo vi /etc/hosts# 配置如下127.0.0.1   localhost192.168.0.100 master192.168.0.101 slave1192.168.0.102 slave2</code></pre></li></ul><h2 id="三-安装配置Zookeeper"><a href="#三-安装配置Zookeeper" class="headerlink" title="三 安装配置Zookeeper"></a>三 安装配置Zookeeper</h2><ul><li><p>下载解压</p><pre class=" language-shell"><code class="language-shell"># 使用wget或本地下载后传到服务器cd /home/sudo mkdir zookeepercd /home/zookeepersudo wget https://dlcdn.apache.org/zookeeper/zookeeper-3.5.9/apache-zookeeper-3.5.9-bin.tar.gzsudo tar -zxvf apache-zookeeper-3.5.9-bin.tar.gz</code></pre></li><li><p>配置环境变量</p><pre class=" language-shell"><code class="language-shell"># 修改三台主机# sudo vi /etc/profile# 添加环境变量export ZOOKEEPER_HOME=/home/zookeeper/apache-zookeeper-3.5.9-binexport PATH=$ZOOKEEPER_HOME/bin:$PATHsource /etc/profile</code></pre></li></ul><ul><li><p>创建目录</p><pre class=" language-shell"><code class="language-shell">cd apache-zookeeper-3.5.9-binsudo mkdir datasudo mkdir logs</code></pre></li></ul><ul><li><p>修改配置</p><pre class=" language-shell"><code class="language-shell">cd confsudo cp zoo_sample.cfg zoo.cfgsudo vi zoo.cfgtickTime=2000initLimit=10syncLimit=5dataDir=/home/zookeeper/apache-zookeeper-3.5.9-bin/datadataLogDir=/home/zookeeper/apache-zookeeper-3.5.9-bin/logsclientPort=2181# 如果为当前主机，则修改为0.0.0.0server.1=master:2287:3387server.2=slave1:2287:3387server.3=slave2:2287:3387</code></pre></li><li><p>创建<code>myid</code>文件</p><blockquote><p>在各服务器节点(<code>master</code>、<code>slave1</code>、<code>slave2</code>)的 <code>dataDir</code> 目录下创建名为 <code>myid</code> 的文件，在文件第一行写上对应的 Server id</p></blockquote><pre class=" language-shell"><code class="language-shell">master:echo "1" > myidslave1:echo "2" > myidslave2:echo "3" > myid</code></pre></li><li><p>启动测试</p><blockquote><p>启动顺序决定leadert,follower</p></blockquote><pre class=" language-shell"><code class="language-shell"># 分别在三台主机上cd /home/zookeeper/apache-zookeeper-3.5.9-bin/bin/zkServer.sh start# 集群验证# 查看状态(需全部节点启动)zkServer.sh status</code></pre></li><li><p>基本命令</p><pre class=" language-shell"><code class="language-shell"># 停止zkServer.sh stop</code></pre></li></ul><h2 id="四-KafKa-集群搭建"><a href="#四-KafKa-集群搭建" class="headerlink" title="四 KafKa 集群搭建"></a>四 KafKa 集群搭建</h2><ul><li><p>下载解压</p><blockquote><p>注意选择版本时，选择<code>Binary downloads</code>,不要选择<code>Source download</code>！！！否则启动时会提示<code>Could not find or load main class kafka.Kafka</code>，此时需要编译后才可以使用 。</p></blockquote><pre class=" language-shell"><code class="language-shell">cd /homemkdir Kafkacd Kafkamkdir datasudo wget https://archive.apache.org/dist/kafka/3.0.0/kafka_2.12-3.0.0.tgztar -xzf kafka_2.12-3.0.0.tgz</code></pre></li><li><p>修改配置</p><pre class=" language-shell"><code class="language-shell">cd kafka_2.12-3.0.0/configvi server.properties# 节点1# 群中每个节点的唯一标识broker.id=0# 监听地址listeners=PLAINTEXT://master:9092# 数据的存储位置log.dirs=/home/Kafka/data# Zookeeper连接地址zookeeper.connect=master:2181,slave1:2181,slave2:2181# 节点2broker.id=1listeners=PLAINTEXT://slave1:9092log.dirs=/home/Kafka/datazookeeper.connect=master:2181,slave1:2181,slave2:2181# 节点3broker.id=2listeners=PLAINTEXT://slave2:9092log.dirs=/home/Kafka/datazookeeper.connect=master:2181,slave1:2181,slave2:2181</code></pre></li><li><p>启动</p><pre class=" language-shell"><code class="language-shell"># 三节点分别运行启动cd /home/Kafka/kafka_2.12-3.0.0bin/kafka-server-start.sh -daemon config/server.properties </code></pre></li><li><p>测试</p><pre class=" language-shell"><code class="language-shell">bin/kafka-topics.sh --create --bootstrap-server master:9092 --replication-factor 1 --partitions 1 --topic testbin/kafka-topics.sh --list --bootstrap-server master:9092bin/kafka-topics.sh --describe --bootstrap-server master:9092 --topic test</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>266周赛总结</title>
      <link href="2021/11/07/266%E5%91%A8%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
      <url>2021/11/07/266%E5%91%A8%E8%B5%9B%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<ol><li><p><a href="https://leetcode-cn.com/problems/count-vowel-substrings-of-a-string/">统计字符串中的元音子字符串</a></p><p>暴力，两次遍历找出符合条件的数目</p><a id="more"></a><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">countVowelSubstrings</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> word<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token number">0</span>        word_set <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> word<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token string">'aeiou'</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">,</span> len<span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> word<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                        word_set<span class="token punctuation">.</span>add<span class="token punctuation">(</span>word<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        word_set <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token keyword">break</span>                    <span class="token keyword">if</span> <span class="token string">'a'</span> <span class="token keyword">in</span> word_set <span class="token operator">and</span> <span class="token string">'e'</span> <span class="token keyword">in</span> word_set <span class="token operator">and</span> <span class="token string">'i'</span> <span class="token keyword">in</span> word_set <span class="token operator">and</span> <span class="token string">'o'</span> <span class="token keyword">in</span> word_set <span class="token operator">and</span> <span class="token string">'u'</span> <span class="token keyword">in</span> word_set<span class="token punctuation">:</span>                        res <span class="token operator">+=</span> <span class="token number">1</span>                word_set <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>        <span class="token keyword">return</span> res</code></pre></li></ol><hr><ol start="2"><li><p><a href="https://leetcode-cn.com/problems/vowels-of-all-substrings/">所有子字符串中的元音</a></p><p>双指针，</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">countVowels</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> word<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        left <span class="token operator">=</span> right <span class="token operator">=</span> <span class="token number">0</span>        res <span class="token operator">=</span> <span class="token number">0</span>        cur <span class="token operator">=</span> <span class="token number">0</span>        pre <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> right <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> word<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token string">'aeiou'</span><span class="token punctuation">:</span>                cur <span class="token operator">+=</span> <span class="token number">1</span>            pre <span class="token operator">+=</span> cur            right <span class="token operator">+=</span> <span class="token number">1</span>        pw <span class="token operator">=</span> word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        res <span class="token operator">+=</span> pre        left <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> pw <span class="token keyword">in</span> <span class="token string">'aeiou'</span><span class="token punctuation">:</span>                pre <span class="token operator">=</span> pre <span class="token operator">-</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            res <span class="token operator">+=</span> pre            pw <span class="token operator">=</span> word<span class="token punctuation">[</span>left<span class="token punctuation">]</span>            left <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> res</code></pre></li></ol><hr><ol start="3"><li><a href="https://leetcode-cn.com/problems/minimized-maximum-of-products-distributed-to-any-store/">分配给商店的最多商品的最小值</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 周赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>265周赛总结</title>
      <link href="2021/11/02/265%E5%91%A8%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
      <url>2021/11/02/265%E5%91%A8%E8%B5%9B%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<ol><li><h4 id="值相等的最小索引"><a href="#值相等的最小索引" class="headerlink" title="值相等的最小索引"></a><a href="https://leetcode-cn.com/problems/smallest-index-with-equal-value/">值相等的最小索引</a></h4><p>模拟遍历，满足条件则返回</p><a id="more"></a><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">smallestEqual</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> i        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span></code></pre></li></ol><ol start="2"><li><h4 id="找出临界点之间的最小和最大距离"><a href="#找出临界点之间的最小和最大距离" class="headerlink" title="找出临界点之间的最小和最大距离"></a><a href="https://leetcode-cn.com/problems/find-the-minimum-and-maximum-number-of-nodes-between-critical-points/">找出临界点之间的最小和最大距离</a></h4><p>遍历得出所有的极大极小值点列表</p><p>遍历极大极小值列表，找出最大最小距离</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, val=0, next=None):</span><span class="token comment" spellcheck="true">#         self.val = val</span><span class="token comment" spellcheck="true">#         self.next = next</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">nodesBetweenCriticalPoints</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">:</span>        point_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token operator">not</span> head<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        i <span class="token operator">=</span> <span class="token number">0</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> head<span class="token punctuation">.</span>next<span class="token punctuation">:</span>            pre <span class="token operator">=</span> head<span class="token punctuation">.</span>val            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next            i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> head<span class="token punctuation">.</span>next <span class="token operator">and</span> pre <span class="token operator">&lt;</span> head<span class="token punctuation">.</span>val <span class="token operator">></span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                point_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span> head<span class="token punctuation">.</span>next <span class="token operator">and</span> pre <span class="token operator">></span> head<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                point_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>point_list<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span>point_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> point_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> point_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> point_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>point_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> point_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> point_list<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> point_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> point_list<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">return</span> res</code></pre></li><li><h4 id="转化数字的最小运算数"><a href="#转化数字的最小运算数" class="headerlink" title="[转化数字的最小运算数"></a>[转化数字的最小运算数</h4><p>典型无权最短路，使用BFS求解</p><blockquote><p>😭开始想成了回溯</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minimumOperations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token punctuation">:</span> int<span class="token punctuation">,</span> goal<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span>        visited <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>        step <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> q<span class="token punctuation">:</span>            size <span class="token operator">=</span> len<span class="token punctuation">(</span>q<span class="token punctuation">)</span>            <span class="token keyword">while</span> size<span class="token punctuation">:</span>                cur <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> num <span class="token keyword">in</span> nums<span class="token punctuation">:</span>                    cal <span class="token operator">=</span> <span class="token punctuation">[</span>num <span class="token operator">+</span> cur<span class="token punctuation">,</span> cur <span class="token operator">-</span> num<span class="token punctuation">,</span> cur <span class="token operator">^</span> num<span class="token punctuation">]</span>                    <span class="token keyword">for</span> x <span class="token keyword">in</span> cal<span class="token punctuation">:</span>                        <span class="token keyword">if</span> x <span class="token operator">==</span> goal<span class="token punctuation">:</span>                            <span class="token keyword">return</span> step <span class="token operator">+</span> <span class="token number">1</span>                        <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;=</span> <span class="token number">1000</span> <span class="token operator">and</span> x <span class="token operator">not</span> <span class="token keyword">in</span> visited<span class="token punctuation">:</span>                            visited<span class="token punctuation">.</span>add<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                            q<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                size <span class="token operator">-=</span> <span class="token number">1</span>            step <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span></code></pre></li><li><h4 id="同源字符串检测"><a href="#同源字符串检测" class="headerlink" title="同源字符串检测"></a><a href="https://leetcode-cn.com/problems/check-if-an-original-string-exists-given-two-encoded-strings/">同源字符串检测</a></h4></li></ol>]]></content>
      
      
      <categories>
          
          <category> 周赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>259周赛总结</title>
      <link href="2021/09/21/259%E5%91%A8%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
      <url>2021/09/21/259%E5%91%A8%E8%B5%9B%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h4 id="2011-执行操作后的变量值"><a href="#2011-执行操作后的变量值" class="headerlink" title="2011. 执行操作后的变量值"></a><a href="https://leetcode-cn.com/problems/final-value-of-variable-after-performing-operations/">2011. 执行操作后的变量值</a></h4><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>​    水题，常规循环+判断</p><a id="more"></a><h5 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">finalValueAfterOperations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> operations<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> operation <span class="token keyword">in</span> operations<span class="token punctuation">:</span>            <span class="token keyword">if</span> operation <span class="token operator">==</span> <span class="token string">'++X'</span> <span class="token operator">or</span> operation <span class="token operator">==</span> <span class="token string">'X++'</span><span class="token punctuation">:</span>                res <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">elif</span> operation <span class="token operator">==</span> <span class="token string">'--X'</span> <span class="token operator">or</span> operation <span class="token operator">==</span> <span class="token string">'X--'</span><span class="token punctuation">:</span>                res <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> res</code></pre><h4 id="2012-数组美丽值求和"><a href="#2012-数组美丽值求和" class="headerlink" title="2012. 数组美丽值求和"></a><a href="https://leetcode-cn.com/problems/sum-of-beauty-in-the-array/">2012. 数组美丽值求和</a></h4><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>​    分两次前后循环，得出数组的正向和反向的最大最小值列表，再判断得出最终的美丽值。</p><h5 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h5><pre class=" language-Python"><code class="language-Python">class Solution:    def sumOfBeauties(self, nums: List[int]) -> int:        nums_max = [nums[0]] * len(nums)        nums_min = [nums[-1]] * len(nums)        for i in range(1, len(nums)):            nums_max[i] = max(nums[i], nums_max[i - 1])        for i in range(len(nums) - 2, -1, -1):            nums_min[i] = min(nums[i], nums_min[i + 1])        res = 0        for i in range(1, len(nums) - 1):            if nums_max[i - 1] < nums[i] < nums_min[i + 1]:                res += 2            elif nums[i-1] < nums[i] <  nums[i+1]:                res += 1        return res</code></pre><h4 id="2013-检测正方形"><a href="#2013-检测正方形" class="headerlink" title="2013. 检测正方形"></a><a href="https://leetcode-cn.com/problems/detect-squares/">2013. 检测正方形</a></h4><h5 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h5><p>​    使用Hash表存储每次添加的点， 每次查询时， 判断能构成正方形的三个点是否存在哈希表中，判断公式如下：x,y(查询的点)， (x1,y1),  (x, y1), (x1,y)存在哈希表中，且abs(x1 - x) = abs(y1 - y)</p><h5 id="解答-2"><a href="#解答-2" class="headerlink" title="解答"></a>解答</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> Counter<span class="token keyword">class</span> <span class="token class-name">DetectSquares</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>square <span class="token operator">=</span> Counter<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> point<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        x<span class="token punctuation">,</span> y <span class="token operator">=</span> point        self<span class="token punctuation">.</span>square<span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> point<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        x1<span class="token punctuation">,</span> y1 <span class="token operator">=</span> point        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> self<span class="token punctuation">.</span>square<span class="token punctuation">:</span>            <span class="token keyword">if</span> abs<span class="token punctuation">(</span>x1<span class="token operator">-</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> abs<span class="token punctuation">(</span>y1<span class="token operator">-</span>y<span class="token punctuation">)</span> <span class="token operator">and</span> x <span class="token operator">!=</span> x1<span class="token punctuation">:</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>square <span class="token operator">and</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y1<span class="token punctuation">)</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>square<span class="token punctuation">:</span>                     res <span class="token operator">+=</span> self<span class="token punctuation">.</span>square<span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>square<span class="token punctuation">[</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>square<span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> res</code></pre>]]></content>
      
      
      <categories>
          
          <category> 周赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当Clickhouse Distributed遇到ReplacingMergeTree</title>
      <link href="2021/09/07/%E5%BD%93Clickhouse%20Distributed%E9%81%87%E5%88%B0ReplacingMergeTree/"/>
      <url>2021/09/07/%E5%BD%93Clickhouse%20Distributed%E9%81%87%E5%88%B0ReplacingMergeTree/</url>
      
        <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>​    由于业务限制，数据库中存在大量重复数据，故采用了ReplacingMergeTree表引擎，但后台始终没有进行数据合并。</p><a id="more"></a><ul><li><p>建表语句</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> xxxx<span class="token punctuation">.</span>xxxx <span class="token keyword">ON</span> CLUSTER xxx<span class="token punctuation">(</span>    user_id String<span class="token punctuation">,</span>    name String<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> ReplacingMergeTree<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">(</span>user_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> xxxx<span class="token punctuation">.</span>xxxx <span class="token keyword">ON</span> CLUSTER xxx <span class="token keyword">as</span> xxxx<span class="token punctuation">.</span>xxxx <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">Distributed</span><span class="token punctuation">(</span><span class="token string">'xxxx'</span><span class="token punctuation">,</span> <span class="token string">'xxxx'</span><span class="token punctuation">,</span> xxxx<span class="token punctuation">,</span> rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><ul><li><p>查询数据是否有重复</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> xxxx<span class="token punctuation">.</span>xxxx<span class="token number">41905623</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> x <span class="token keyword">FROM</span> xxxx<span class="token punctuation">.</span>xxxx <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token punctuation">[</span>oder_key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token number">41705616</span></code></pre></li><li><p>手动执行数据合并，也没有去除重复数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">OPTIMIZE</span> <span class="token keyword">TABLE</span> <span class="token operator">~</span> <span class="token keyword">ON</span> CLUSTER <span class="token operator">~</span> FINAL<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> xxxx<span class="token punctuation">.</span>xxxx<span class="token number">41905623</span></code></pre></li></ul><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><p>​    分布式表存储数据采用分片存储，如6条数据存3个节点，则每个节点存储2条数据。当发生数据合并时，可能只合并当前节点的数据。最终也在这<a href="https://stackoverflow.com/questions/62616949/deduplication-in-distributed-clickhouse-table%EF%BC%8C%E9%AA%8C%E8%AF%81%E4%BA%86%E8%BF%99%E4%B8%80%E7%8C%9C%E6%83%B3%E3%80%82">https://stackoverflow.com/questions/62616949/deduplication-in-distributed-clickhouse-table，验证了这一猜想。</a></p><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>​    创建分布式表时，不使用rand()进行随机分布，使用user_id进行分片，使相同user_id的数据在写入时落在相同的节点。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> xxxx<span class="token punctuation">.</span>xxxx <span class="token keyword">ON</span> CLUSTER xxx <span class="token keyword">as</span> xxxx<span class="token punctuation">.</span>xxxx <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">Distributed</span><span class="token punctuation">(</span><span class="token string">'xxxx'</span><span class="token punctuation">,</span> <span class="token string">'xxxx'</span><span class="token punctuation">,</span> xxxx<span class="token punctuation">,</span> user_id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ClickHouse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReplacingMergeTree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Python3 urllib3 urllib3.exceptions.maxretryerror httpsconnectionpool(host=‘xxxxx‘, port=443)</title>
      <link href="2021/06/21/%E8%A7%A3%E5%86%B3Python3%20urllib3%20urllib3.exceptions.maxretryerror%20httpsconnectionpool(host=%E2%80%98xxxxx%E2%80%98,%20port=443)/"/>
      <url>2021/06/21/%E8%A7%A3%E5%86%B3Python3%20urllib3%20urllib3.exceptions.maxretryerror%20httpsconnectionpool(host=%E2%80%98xxxxx%E2%80%98,%20port=443)/</url>
      
        <content type="html"><![CDATA[<h3 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h3><p>在使用代理进行请求时，代理只通过<code>HTTP</code>请求，此时请求进行<code>HTTPS</code>验证时验证失败。</p><a id="more"></a><h3 id="两种解决方案"><a href="#两种解决方案" class="headerlink" title="两种解决方案"></a>两种解决方案</h3><ol><li>在<code>1.25</code>版本之前，请求时不会进行HTTPS验证。故可降低urllib3版本。</li></ol><pre class=" language-shell"><code class="language-shell">   1.25 (2019-04-22)   Require and validate certificates by default when using HTTPS (Pull #1507)</code></pre><pre class=" language-shell"><code class="language-shell">pip install -U "urllib3<1.25"</code></pre><ol start="2"><li><p>修改本地代理，将HTTPS覆盖为HTTP请求</p><blockquote><p>Windows 10下打开设置 -&gt; 网络和Internet -&gt; 代理，找到代理的IP和端口</p></blockquote><pre class=" language-python"><code class="language-python">proxies <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">'http'</span><span class="token punctuation">:</span> <span class="token string">'http://127.0.0.1:1080'</span><span class="token punctuation">,</span>    <span class="token string">'https'</span><span class="token punctuation">:</span> <span class="token string">'http://127.0.0.1:1080'</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">,</span> proxies<span class="token operator">=</span>proxies<span class="token punctuation">)</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pyinstall打包ssl验证错误</title>
      <link href="2021/05/28/Pyinstall%E6%89%93%E5%8C%85ssl%E9%AA%8C%E8%AF%81%E9%94%99%E8%AF%AF/"/>
      <url>2021/05/28/Pyinstall%E6%89%93%E5%8C%85ssl%E9%AA%8C%E8%AF%81%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>使用Google api，程序能正常运行，但使用PyInstaller打包后出现ssl验证错误</p><blockquote><p>Error: Exception in ‘grpc._cython.cygrpc.ssl_roots_override_callback’ ignored</p><p>assertion failed: pem_root_certs != nullptr</p></blockquote><a id="more"></a><ul><li><p>解决办法</p><p>找到Python安装路径下的\Lib\site-packages\grpc_cython_credentials\roots.pem,</p><p>并拷贝到打包后的exe文件目录下。</p></li></ul><ul><li><p>参考链接</p><blockquote><p><a href="https://github.com/grpc/grpc/issues/9223#issuecomment-412054216">https://github.com/grpc/grpc/issues/9223#issuecomment-412054216</a></p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyInstaller </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7安装三节点Hadoop集群</title>
      <link href="2021/03/22/CentOS7%E5%AE%89%E8%A3%85%E4%B8%89%E8%8A%82%E7%82%B9Hadoop%E9%9B%86%E7%BE%A4/"/>
      <url>2021/03/22/CentOS7%E5%AE%89%E8%A3%85%E4%B8%89%E8%8A%82%E7%82%B9Hadoop%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="一-服务器配置"><a href="#一-服务器配置" class="headerlink" title="一 服务器配置"></a>一 服务器配置</h4><ul><li><p>关闭防火墙</p><pre class=" language-shell"><code class="language-shell"># 查看状态firewall-cmd --state# 停止防火墙systemctl stop firewalld.service# 禁止开机自启动systemctl disable firewalld.service</code></pre></li><li><p>关闭selinux</p><pre class=" language-shell"><code class="language-shell">vi /etc/sysconfig/selinuxSELINUX=disabled</code></pre><a id="more"></a></li></ul><h4 id="二-网络配置"><a href="#二-网络配置" class="headerlink" title="二 网络配置"></a>二 网络配置</h4><ul><li><p>找到待配置网卡</p><pre class=" language-shell"><code class="language-shell">cd /etc/sysconfig/network-scripts/ls# 这里选择ifcfg-enp3s0vi ifcfg-enp3s0</code></pre></li><li><p>修改下列配置</p><pre class=" language-shell"><code class="language-shell">BOOTPROTO=staticONBOOT=yesIPADDR=192.168.0.200GATEWAY=192.168.0.1DNS1=8.8.8.8</code></pre></li><li><p>网络测试</p><pre class=" language-shell"><code class="language-shell">service network restart# 局域网测试ping 192.168.0.229# 外网测试ping www.baidu.com</code></pre></li></ul><h4 id="三-安装Java"><a href="#三-安装Java" class="headerlink" title="三 安装Java"></a>三 安装Java</h4><ul><li><p>创建安装目录</p><pre class=" language-shell"><code class="language-shell">cd /home/whrmkdir javacd java</code></pre></li><li><p>安装wget</p><pre class=" language-shell"><code class="language-shell">yum -y install wget</code></pre></li></ul><ul><li><p>下载解压</p><p>使用wget下载或通过官网下载后，使用WinSCP传到 /home/whr/java 目录下</p><pre class=" language-shell"><code class="language-shell">cd /home/whr/javatar -zxvf jdk-8u281-linux-x64.tar.gz</code></pre></li><li><p>设置环境变量</p><pre class=" language-shell"><code class="language-shell">vi /etc/profile# 末尾添加export JAVA_HOME=/home/whr/java/jdk1.8.0_281export JRE_HOME=$&#123;JAVA_HOME&#125;/jreexport CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/libexport PATH=$&#123;JAVA_HOME&#125;/bin:$PATH# 激活环境变量source /etc/profile</code></pre></li><li><p>添加软链接</p><pre class=" language-shell"><code class="language-shell">ln -s /home/whr/java/jdk1.8.0_281/bin/java /usr/bin/java</code></pre></li><li><p>安装完成</p><pre class=" language-shell"><code class="language-shell">java -version</code></pre></li></ul><h4 id="四-配置hosts"><a href="#四-配置hosts" class="headerlink" title="四 配置hosts"></a>四 配置hosts</h4><ul><li><p>节点规划</p><table><thead><tr><th>IP</th><th>NodeType</th><th>Name</th></tr></thead><tbody><tr><td>192.168.0.200</td><td>DataNode</td><td>slave1</td></tr><tr><td>192.168.0.201</td><td>DataNode</td><td>slave2</td></tr><tr><td>192.168.0.202</td><td>NameNode / DataNode</td><td>master</td></tr></tbody></table></li><li><p>hosts 配置</p><pre class=" language-shell"><code class="language-shell">vi /etc/hosts# 配置如下127.0.0.1   localhost192.168.0.200 slave1192.168.0.201 slave2192.168.0.202 master</code></pre></li></ul><h4 id="五-配置SSH（主节点）"><a href="#五-配置SSH（主节点）" class="headerlink" title="五 配置SSH（主节点）"></a>五 配置SSH（主节点）</h4><ul><li><p>修改配置文件</p><pre class=" language-shell"><code class="language-shell">vi /etc/ssh/sshd_configAuthorizedKeysFile      .ssh/authorized_keysPubkeyAuthentication yes</code></pre></li><li><p>生成秘钥</p><pre class=" language-shell"><code class="language-shell">ssh-keygen -t dsa -P '' -f ~/.ssh/id_dsa</code></pre></li></ul><ul><li><p>分发公钥</p><pre class=" language-shell"><code class="language-shell">ssh-copy-id -i ~/.ssh/id_dsa.pub masterssh-copy-id -i ~/.ssh/id_dsa.pub slave1ssh-copy-id -i ~/.ssh/id_dsa.pub slave2# 验证ssh masterssh slave1ssh slave2</code></pre></li></ul><h4 id="六-安装Hadoop（主节点）"><a href="#六-安装Hadoop（主节点）" class="headerlink" title="六 安装Hadoop（主节点）"></a>六 安装Hadoop（主节点）</h4><ul><li><p>下载</p><pre class=" language-shell"><code class="language-shell">cd /home/whrmkdir hadoopcd hadoopwget https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/hadoop-3.2.1/hadoop-3.2.1.tar.gz# 或本地下载使用WinSCP传送</code></pre></li><li><p>安装</p><pre class=" language-shell"><code class="language-shell">tar zxvf hadoop-3.2.1.tar.gz# 创建软链接ln -s /home/whr/hadoop/hadoop-3.2.1  /usr/local/hadoop</code></pre></li><li><p>配置Hadoop环境变量</p><pre class=" language-shell"><code class="language-shell">vi /etc/profile# 末尾添加export HADOOP_HOME=/home/whr/hadoop/hadoop-3.2.1export PATH=$&#123;HADOOP_HOME&#125;/bin:$PATHsource /etc/profile</code></pre></li><li><p>修改配置文件</p><pre class=" language-shell"><code class="language-shell">cd /usr/local/hadoop/etc/hadoop</code></pre><ul><li><p>配置hadoop-env.sh</p><pre class=" language-shell"><code class="language-shell">vi hadoop-env.shexport JAVA_HOME=/home/whr/java/jdk1.8.0_281</code></pre></li><li><p>配置core-site.xml</p><pre class=" language-shell"><code class="language-shell">vi core-site.xml<configuration>    <property>      <name>hadoop.tmp.dir</name>   <value>/home/whr/hadoop/tmp</value>   <description>Abase for other temporary directories.</description>    </property>    <property>      <name>fs.default.name</name>      <value>hdfs://master:9000</value>    </property></configuration></code></pre></li><li><p>配置hdfs-site.xml</p><pre class=" language-shell"><code class="language-shell">vi hdfs-site.xml<configuration>    <property>      <name>dfs.namenode.name.dir</name>      <value>/home/whr/hadoop/dfs/name</value>    </property>    <property>      <name>dfs.datanode.data.dir</name>      <value>/home/whr/hadoop/dfs/data</value>    </property></configuration></code></pre></li><li><p>配置yarn-site.xml</p><pre class=" language-shell"><code class="language-shell">vi yarn-site.xml<configuration>    <property>      <name>yarn.nodemanager.aux-services</name>      <value>mapreduce_shuffle</value>    </property>    <property>      <name>yarn.nodemanager.aux-services.mapreduce_shuffle.class</name>      <value>org.apache.hadoop.mapred.ShuffleHandler</value>    </property>    <property>      <name>yarn.resourcemanager.hostname</name>      <value>master</value>    </property></configuration></code></pre></li><li><p>配置mapred-site.xml</p><pre class=" language-shell"><code class="language-shell">vi mapred-site.xml<configuration>    <property>      <name>mapred.job.tracker</name>      <value>master:49001</value>    </property>    <property>      <name>mapred.local.dir</name>      <value>/home/whr/hadoop/var</value>    </property>    <property>      <name>mapreduce.framework.name</name>      <value>yarn</value>    </property></configuration></code></pre></li><li><p>配置workers</p><pre class=" language-shell"><code class="language-shell">vi workersmasterslave1slave2</code></pre></li><li><p>修改hdfs启动和停止脚本</p><pre class=" language-shell"><code class="language-shell">cd /usr/local/hadoop/sbinvi start-dfs.shvi stop-dfs.sh# 在最前面加如下内容HDFS_DATANODE_USER=rootHADOOP_SECURE_DN_USER=rootHDFS_NAMENODE_USER=rootHDFS_SECONDARYNAMENODE_USER=root</code></pre></li><li><p>修改yarn启动和停止脚本</p><pre class=" language-shell"><code class="language-shell">cd /usr/local/hadoop/sbinvi start-yarn.shvi stop-yarn.sh# 在文件前添加如下内容YARN_RESOURCEMANAGER_USER=rootHADOOP_SECURE_DN_USER=rootYARN_NODEMANAGER_USER=root</code></pre></li></ul></li><li><p>从节点配置Hadoop</p><pre class=" language-shell"><code class="language-shell"># 将配置好的Hadoop复制到从节点scp -r /home/whr/hadoop/hadoop-3.2.1 root@192.168.0.201:/home/whr/hadoop/# 设置软链接ssh slave1ln -s /home/whr/hadoop/hadoop-3.2.1  /usr/local/hadoopexitssh slave2ln -s /home/whr/hadoop/hadoop-3.2.1  /usr/local/hadoopexit</code></pre></li></ul><h4 id="七-启动测试"><a href="#七-启动测试" class="headerlink" title="七 启动测试"></a>七 启动测试</h4><ul><li><p>格式化namenode</p><pre class=" language-shell"><code class="language-shell">hdfs namenode -format# 重新格式化需要删除tmp和dfs文件夹</code></pre></li><li><p>启动hdfs</p><pre class=" language-shell"><code class="language-shell">cd /usr/local/hadoop/sbinbash start-all.sh</code></pre></li><li><p>启动yarn</p><pre class=" language-shell"><code class="language-shell">bash start-all.sh</code></pre></li><li><p>验证</p><pre class=" language-shell"><code class="language-shell">jps4800 NodeManager4002 NameNode4387 SecondaryNameNode4666 ResourceManager13355 Jps4126 DataNode</code></pre></li></ul><h1 id="客户端访问"><a href="#客户端访问" class="headerlink" title="客户端访问"></a>客户端访问</h1><p>  <a href="http://192.168.0.202:9870/">http://192.168.0.202:9870/</a><br>  <a href="http://192.168.0.202:8088/">http://192.168.0.202:8088/</a></p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Pyinstaller打包配置文件</title>
      <link href="2021/03/05/Pyinstaller%20%E6%89%93%E5%8C%85%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
      <url>2021/03/05/Pyinstaller%20%E6%89%93%E5%8C%85%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
      
        <content type="html"><![CDATA[<p>Pyinstaller 打包配置文件夹</p><a id="more"></a><ol><li><p>生成资源文件目录访问路径</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">resource_path</span><span class="token punctuation">(</span>relative_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> getattr<span class="token punctuation">(</span>sys<span class="token punctuation">,</span> <span class="token string">'frozen'</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        base_path <span class="token operator">=</span> sys<span class="token punctuation">.</span>_MEIPASS    <span class="token keyword">else</span><span class="token punctuation">:</span>        base_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>base_path<span class="token punctuation">,</span> relative_path<span class="token punctuation">)</span></code></pre></li><li><p>修改需要读取路径的文件或文件夹</p><pre class=" language-python"><code class="language-python">resource_path<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">,</span> <span class="token string">"data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>打包py文件生成.spec文件</p><pre class=" language-powershell"><code class="language-powershell">pyinstaller <span class="token operator">-</span>F QueryGui<span class="token punctuation">.</span>py</code></pre></li><li><p>修改.spec文件中datas项，添加配置文件目录和待生成的文件夹名</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> Analysis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             pathex<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             binaries<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             datas<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'config'</span><span class="token punctuation">,</span> <span class="token string">'config'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre></li><li><p>删除build和dist文件夹，重新生成打包文件</p><pre><code>pyinstaller -F QueryGui.spec</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Selenium获取请求信息</title>
      <link href="2021/01/26/Selenium%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E4%BF%A1%E6%81%AF/"/>
      <url>2021/01/26/Selenium%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>​    在获取facebook analytics数据时，抓取到的请求需要携带token，且具有时效性。</p><a id="more"></a><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><ol><li>JS逆向分析token生成过程及逻辑（难度较大，尝试无果后放弃）</li><li>使用selenium模拟请求，将过程交给浏览器，只需要获取结果</li></ol><h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriveroption <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>ChromeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用本地cookie, 运行时需关闭已打开的浏览器</span>option<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span>r<span class="token string">'--user-data-dir=C:\...\User Data'</span><span class="token punctuation">)</span>option<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--profile-directory=Default'</span><span class="token punctuation">)</span>browser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>options<span class="token operator">=</span>option<span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.facebook.com/analytics/"</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取selenium执行了那些请求的关键</span>test <span class="token operator">=</span> browser<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">"var performance = window.performance || window.mozPerformance || window.msPerformance || window.webkitPerformance || &amp;#123;&amp;#125;; var network = performance.getEntries() || &amp;#123;&amp;#125;; return network;"</span><span class="token punctuation">)</span>access_token <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> item <span class="token keyword">in</span> test<span class="token punctuation">:</span>  <span class="token keyword">if</span> <span class="token string">"access_token"</span> <span class="token keyword">in</span> item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    access_token <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>access_token<span class="token punctuation">)</span>browser<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集及Python实现</title>
      <link href="2021/01/18/%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%8F%8APython%E5%AE%9E%E7%8E%B0/"/>
      <url>2021/01/18/%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%8F%8APython%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>并查集：在计算机科学中，<strong>并查集</strong>是一种树型的<strong>数据结构</strong>，用于处理一些<strong>不交集</strong>（Disjoint Sets）的合并及查询问题。   —wiki</p></blockquote><a id="more"></a><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>​    并查集，顾名思义，包含了<strong>合并</strong>和<strong>查询</strong>操作，用于解决动态连通性问题。</p><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 主体框架</span><span class="token keyword">class</span> <span class="token class-name">UnionFind</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 初始化</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true"># 查询根节点</span>    <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true"># 合并节点</span>    <span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true"># 判断两个节点是否连通</span>    <span class="token keyword">def</span> <span class="token function">is_same_set</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span></code></pre><ul><li><p>初始化</p><p>将所有节点的父节点设为None</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> M<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>father_dict <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>    <span class="token comment" spellcheck="true"># 记录集合的数量，一般为返回值</span>    self<span class="token punctuation">.</span>nums_set <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>father_dict<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>father_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> None            <span class="token comment" spellcheck="true"># 集合的数量+1</span>            self<span class="token punctuation">.</span>nums_set <span class="token operator">+=</span> <span class="token number">1</span></code></pre></li><li><p>查询</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>    root <span class="token operator">=</span> x    <span class="token keyword">while</span> self<span class="token punctuation">.</span>father_dict<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">!=</span> None<span class="token punctuation">:</span>        root <span class="token operator">=</span> self<span class="token punctuation">.</span>father_dict<span class="token punctuation">[</span>root<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 路径压缩</span>    <span class="token keyword">while</span> x <span class="token operator">!=</span> root<span class="token punctuation">:</span>        cur_father <span class="token operator">=</span> self<span class="token punctuation">.</span>father_dict<span class="token punctuation">[</span>x<span class="token punctuation">]</span>        self<span class="token punctuation">.</span>father_dict<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> root        x <span class="token operator">=</span> cur_father    <span class="token keyword">return</span> root</code></pre></li><li><p>合并</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    a_root<span class="token punctuation">,</span> b_root <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 任意指定一个节点为父节点</span>    <span class="token keyword">if</span> a_root <span class="token operator">!=</span> b_root<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>father_dict<span class="token punctuation">[</span>a_root<span class="token punctuation">]</span> <span class="token operator">=</span> b_root        self<span class="token punctuation">.</span>nums_set <span class="token operator">-=</span> <span class="token number">1</span></code></pre></li><li><p>判断是否在同一集合</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_same_set</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas浅析</title>
      <link href="2021/01/07/pandas%E6%80%BB%E7%BB%93/"/>
      <url>2021/01/07/pandas%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h4 id="创建DataFrame"><a href="#创建DataFrame" class="headerlink" title="创建DataFrame"></a>创建DataFrame</h4><p>​    <a id="more"></a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd</code></pre><ol><li><p>读取csv文件并转为DataFrame</p><pre class=" language-Python"><code class="language-Python">csv_data = pd.read_csv("test_data.csv", encoding = "ISO-8859-1")</code></pre></li></ol><ol start="2"><li><p>字典转为DataFrame</p><pre class=" language-Python"><code class="language-Python">d = &#123;'col1': [1, 2], 'col2': [3, 4]&#125;df = pd.DataFrame(data=d)</code></pre><table><thead><tr><th align="right"></th><th align="right">col1</th><th align="right"><strong>col2</strong></th></tr></thead><tbody><tr><td align="right">0</td><td align="right">1</td><td align="right">3</td></tr><tr><td align="right">1</td><td align="right">2</td><td align="right">4</td></tr></tbody></table></li><li><p>双层列表转为DataFrame</p><pre class=" language-Python"><code class="language-Python">data = [['tom', 10], ['nick', 15], ['juli', 14]] # Create the pandas DataFrame df = pd.DataFrame(data, columns = ['Name', 'Age']) </code></pre><table><thead><tr><th align="right"></th><th align="right">Name</th><th align="right">Age</th></tr></thead><tbody><tr><td align="right">0</td><td align="right">tom</td><td align="right">10</td></tr><tr><td align="right">1</td><td align="right">nick</td><td align="right">15</td></tr><tr><td align="right">2</td><td align="right">juli</td><td align="right">14</td></tr></tbody></table></li><li><p>列表字典转DataFrame</p><pre class=" language-Python"><code class="language-Python">data = [&#123;'a': 1, 'b': 2, 'c':3&#125;,         &#123;'a':10, 'b': 20, 'c': 30&#125;] # Creates DataFrame. df = pd.DataFrame(data) </code></pre><table><thead><tr><th align="right"></th><th align="right">a</th><th align="right">b</th><th align="right">c</th></tr></thead><tbody><tr><td align="right">0</td><td align="right">1</td><td align="right">2</td><td align="right">3</td></tr><tr><td align="right">1</td><td align="right">10</td><td align="right">20</td><td align="right">30</td></tr></tbody></table></li><li><p>指定index</p><pre class=" language-python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span> index <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'rank1'</span><span class="token punctuation">,</span>                                 <span class="token string">'rank2'</span><span class="token punctuation">,</span>                                 <span class="token string">'rank3'</span><span class="token punctuation">,</span>                                 <span class="token string">'rank4'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></li></ol><h4 id="修改DataFrame值"><a href="#修改DataFrame值" class="headerlink" title="修改DataFrame值"></a>修改DataFrame值</h4><ol><li><p>修改一列的值</p><pre class=" language-Python"><code class="language-Python">df["data"] = df["data"].map(lambda x: 0)</code></pre></li><li><p>修改多列的值</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> index<span class="token punctuation">,</span> row <span class="token keyword">in</span> df_res<span class="token punctuation">.</span>iterrows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    df_res<span class="token punctuation">.</span>at<span class="token punctuation">[</span>index<span class="token punctuation">,</span> <span class="token string">'data1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    df_res<span class="token punctuation">.</span>at<span class="token punctuation">[</span>index<span class="token punctuation">,</span> <span class="token string">'data2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span></code></pre></li></ol><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><ol><li><p>整体转为str</p><pre class=" language-Python"><code class="language-Python">df = df.astype(str)</code></pre></li><li><p>整体转为int</p><pre class=" language-python"><code class="language-python">df <span class="token operator">=</span> df<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>int<span class="token punctuation">)</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python装饰器实现日志输出</title>
      <link href="2020/11/20/Python%E8%A3%85%E9%A5%B0%E5%99%A8%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA/"/>
      <url>2020/11/20/Python%E8%A3%85%E9%A5%B0%E5%99%A8%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2020/11/20 11:33</span><span class="token comment" spellcheck="true"># @Author  : Wanghairui</span><span class="token comment" spellcheck="true"># @function:</span><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps<span class="token keyword">import</span> logging<span class="token keyword">def</span> <span class="token function">_create_logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">'LogError'</span><span class="token punctuation">)</span>    logger<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span>    file_handler <span class="token operator">=</span> logging<span class="token punctuation">.</span>FileHandler<span class="token punctuation">(</span>r<span class="token string">'./MJlogs.log'</span><span class="token punctuation">)</span>    log_format <span class="token operator">=</span> <span class="token string">'%(levelname)s %(asctime)s %(message)s'</span>    formatter <span class="token operator">=</span> logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span>log_format<span class="token punctuation">)</span>    file_handler<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>formatter<span class="token punctuation">)</span>    logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>file_handler<span class="token punctuation">)</span>    <span class="token keyword">return</span> logger<span class="token keyword">def</span> <span class="token function">logged</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    @wraps<span class="token punctuation">(</span>func<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">do_logging</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            logger <span class="token operator">=</span> _create_logger<span class="token punctuation">(</span><span class="token punctuation">)</span>            error_msg <span class="token operator">=</span> <span class="token string">'And error has occurred at /'</span> <span class="token operator">+</span> func<span class="token punctuation">.</span>__name__ <span class="token operator">+</span> <span class="token string">'\n'</span>            logger<span class="token punctuation">.</span>exception<span class="token punctuation">(</span>error_msg<span class="token punctuation">)</span>            <span class="token keyword">return</span> e    <span class="token keyword">return</span> do_logging</code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python虚拟环境配置</title>
      <link href="2020/11/16/Python%E4%BD%BF%E7%94%A8Virtualenv%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
      <url>2020/11/16/Python%E4%BD%BF%E7%94%A8Virtualenv%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><ol><li><p>安装 virtualenv</p><pre class=" language-shell"><code class="language-shell">pip install virtualenv</code></pre></li><li><p>切换到项目目录下，创建虚拟环境</p><pre class=" language-shell"><code class="language-shell">Windows: virtualenv -p python venvlinux: sudo virtualenv -p python3 venv</code></pre></li><li><p>激活虚拟环境</p><pre class=" language-shell"><code class="language-shell"># windowscd venv/Scriptsactivate# linuxsource venv/bin/activate</code></pre></li><li><p>生成requirement文件</p><pre class=" language-shell"><code class="language-shell">pip freeze > requirements.txt</code></pre></li><li><p>安装requirements.txt所需的模块</p><pre class=" language-shell"><code class="language-shell">pip install -r requirements.txt</code></pre></li><li><p>退出虚拟环境</p><pre class=" language-shell"><code class="language-shell">deactivate</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python生产者消费者模型</title>
      <link href="2020/11/06/Python%20%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/"/>
      <url>2020/11/06/Python%20%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> queue<span class="token keyword">import</span> threading<span class="token keyword">class</span> <span class="token class-name">ThreadProductorConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 初始化模型</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 大小为15的缓冲池，用于容纳产品</span>        self<span class="token punctuation">.</span>q <span class="token operator">=</span> queue<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>screen_lock <span class="token operator">=</span> threading<span class="token punctuation">.</span>Semaphore<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">productor</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> product<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 生产者不停的每3秒生产一个产品</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>product<span class="token punctuation">)</span>            cur_time <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            cur_name <span class="token operator">=</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name            <span class="token comment" spellcheck="true"># print是线程不安全的,需要信号量确保没有冲突</span>            self<span class="token punctuation">.</span>screen_lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>cur_time<span class="token operator">+</span><span class="token string">"  "</span> <span class="token operator">+</span> cur_name <span class="token operator">+</span> <span class="token string">" 生产了一个产品"</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>screen_lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">consumer</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 消费者不停的每2秒消费一个产品</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>            cur_time <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            cur_name <span class="token operator">=</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name            self<span class="token punctuation">.</span>screen_lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>cur_time <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span> cur_name <span class="token operator">+</span> <span class="token string">" 消费了一个产品"</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>screen_lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    tpc <span class="token operator">=</span> ThreadProductorConsumer<span class="token punctuation">(</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> <span class="token string">"product"</span>    <span class="token comment" spellcheck="true"># 实例化了3个生产者</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>tpc<span class="token punctuation">.</span>productor<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 实例化了6个消费者</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        v <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>tpc<span class="token punctuation">.</span>consumer<span class="token punctuation">)</span>        v<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript浅析</title>
      <link href="2020/10/27/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2020/10/27/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、数据类型"><a href="#一、数据类型" class="headerlink" title="一、数据类型"></a>一、数据类型</h2><ul><li><p>Number :</p><ul><li>整数，浮点数，NaN（Not a Number）,Infinity（无限大）</li><li>NaN 与任何值都不相同，包括自己，可通过isNaN()函数判断NaN</li></ul></li></ul><a id="more"></a><ul><li><p><strong>字符串</strong></p><ul><li><p>多行字符串：``</p></li><li><p>模板字符串</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'小明'</span><span class="token punctuation">;</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token template-string"><span class="token string">`你好, $&amp;#123;name&amp;#125;, 你今年$&amp;#123;age&amp;#125;岁了!`</span></span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>字符串操作</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">'Hello, world!'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// length获取长度</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 13</span><span class="token comment" spellcheck="true">// 获取指定位置字符</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'H'</span><span class="token comment" spellcheck="true">// toUpperCase() 字符串全转为大写</span><span class="token comment" spellcheck="true">// toLowerCase() 字符串全转为小写</span><span class="token comment" spellcheck="true">// indexOf()搜索指定字符串出现的位置</span>s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回7</span><span class="token comment" spellcheck="true">//substring()返回指定索引区间的子串</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从索引0开始到5（不包括5），返回'hello'</span></code></pre></li><li><p>字符串不可变</p></li></ul></li><li><p>布尔值</p></li><li><p>null和undefined，大多数情况下，使用null而不是undefined</p></li></ul><h2 id="二、运算符"><a href="#二、运算符" class="headerlink" title="二、运算符"></a>二、运算符</h2><ul><li><p>==：比较时会自动转换数据类型</p></li><li><p>===：只比较数据类型一致的数据</p></li></ul><h2 id="三、数组"><a href="#三、数组" class="headerlink" title="三、数组"></a>三、数组</h2><ul><li><p>同一数组可以包含不同数据类型</p></li><li><p>数组操作</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//length 获取数组的长度,给length赋值将导致数组长度变化</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6</span><span class="token comment" spellcheck="true">// indexOf 搜索一个指定的元素的位置</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span><span class="token comment" spellcheck="true">//切片 slice 截取数组的部分元素，返回一个新的数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从索引3开始到结束: ['D', 'E', 'F', 'G']</span><span class="token keyword">var</span> aCopy <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 复制数组</span><span class="token comment" spellcheck="true">//push() 向数组添加若干元素</span><span class="token comment" spellcheck="true">//pop() 删除最后一个元素</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回Array新的长度: 4</span>arr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2, 'A', 'B']</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// pop()返回'B'</span>arr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2, 'A']</span><span class="token comment" spellcheck="true">//unshift() 向数组头部添加若干元素</span><span class="token comment" spellcheck="true">// shift() 删除数组的第一个元素</span><span class="token comment" spellcheck="true">//sort() 对数组进行排序，默认顺序</span><span class="token comment" spellcheck="true">//reverse() 反转数组</span><span class="token comment" spellcheck="true">//splice()从指定的索引开始删除若干元素，然后再从该位置添加若干元素</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Microsoft'</span><span class="token punctuation">,</span> <span class="token string">'Apple'</span><span class="token punctuation">,</span> <span class="token string">'Yahoo'</span><span class="token punctuation">,</span> <span class="token string">'AOL'</span><span class="token punctuation">,</span> <span class="token string">'Excite'</span><span class="token punctuation">,</span> <span class="token string">'Oracle'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 从索引2开始删除3个元素,然后再添加两个元素:</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Facebook'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回删除的元素 ['Yahoo', 'AOL', 'Excite']</span>arr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span><span class="token comment" spellcheck="true">// 只删除,不添加:</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['Google', 'Facebook']</span>arr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['Microsoft', 'Apple', 'Oracle']</span><span class="token comment" spellcheck="true">// 只添加,不删除:</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Facebook'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回[],因为没有删除任何元素</span>arr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span><span class="token comment" spellcheck="true">//concat() 将两个数组连接起来，返回一个新数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['A', 'B', 'C', 1, 2, 3, 4]</span><span class="token comment" spellcheck="true">//join() 把当前数组的每个元素都用指定的字符串连接起来，然后返回连接后的字符串</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'A-B-C-1-2-3'</span></code></pre></li></ul><h2 id="四、对象"><a href="#四、对象" class="headerlink" title="四、对象"></a>四、对象</h2><ul><li><p>类似于Python的字典    </p></li><li><p>获取对象属性：对象变量.属性名，person.name</p></li><li><p>判断是否包含某个属性：</p><p>in操作符：继承的属性也算</p><p>hasOwnProperty(): 不包含继承的属性</p></li></ul><h2 id="五、strict模式"><a href="#五、strict模式" class="headerlink" title="五、strict模式"></a>五、strict模式</h2><blockquote><p>如果一个变量没有通过var声明就使用，则该变量就自动被声明为全局变量</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//启用strict</span><span class="token string">'use strict'</span><span class="token punctuation">;</span></code></pre><h2 id="六、map和set"><a href="#六、map和set" class="headerlink" title="六、map和set"></a>六、map和set</h2><ul><li><p>map</p><blockquote><p>代替对象存储键值数据，具有极快的查询速度</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'Adam'</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 覆盖掉上面的Adam值</span>m<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'Adam'</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'Adam'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 88</span></code></pre></li><li><p>set</p><blockquote><p>只存值，且值不会重复</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 重复元素被过滤</span><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Set &amp;#123;1, 2, 3, "3"&amp;#125;</span><span class="token comment" spellcheck="true">// 可以重复添加，但不会有效果</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Set &amp;#123;1, 2, 3, 4&amp;#125;</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Set &amp;#123;1, 2, 3, 4&amp;#125;</span></code></pre></li></ul><h2 id="七、常用方法"><a href="#七、常用方法" class="headerlink" title="七、常用方法"></a>七、常用方法</h2><ul><li><p>forEach()</p><blockquote><p>ES5.1标准引入,用于遍历可迭代对象</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'V'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span>a<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// map,参数分别为值，键和map</span><span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> key<span class="token punctuation">,</span> map<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// set,Set与Array类似，但Set没有索引，因此回调函数的前两个参数都是元素本身</span><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>element<span class="token punctuation">,</span> sameElement<span class="token punctuation">,</span> <span class="token keyword">set</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="八、函数"><a href="#八、函数" class="headerlink" title="八、函数"></a>八、函数</h2><ul><li><p>匿名函数：<code>function (x) &#123; ... &#125;</code></p></li><li><p>可以传入多于或少于函数定义的参数的个数</p></li><li><p>关键字arguments：将传入的参数保存为类似于Array</p></li><li><p>rest参数：rest参数写在最后，前面用<code>...</code>标识，用于将多出的参数保存到Array中</p></li><li><p>let关键字：用于声明局部变量，所声明的变量，只在<code>let</code>命令所在的代码块内有效</p></li><li><p>const: <code>const</code>来定义常量，<code>const</code>与<code>let</code>都具有块级作用域</p></li><li><p>解构赋值：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//直接对多个变量同时赋值</span><span class="token keyword">var</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'JavaScript'</span><span class="token punctuation">,</span> <span class="token string">'ES6'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> <span class="token punctuation">[</span>y<span class="token punctuation">,</span> z<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'JavaScript'</span><span class="token punctuation">,</span> <span class="token string">'ES6'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'JavaScript'</span><span class="token punctuation">,</span> <span class="token string">'ES6'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 忽略前两个元素，只对z赋值第三个元素</span></code></pre></li><li><p>闭包：返回值为函数的函数</p></li><li><p>箭头函数：相当于匿名函数</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">*</span> x <span class="token operator">+</span> y <span class="token operator">*</span> yx <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="九、需要注意的点"><a href="#九、需要注意的点" class="headerlink" title="九、需要注意的点"></a>九、需要注意的点</h2><ul><li>JavaScript引擎在行末自动添加分号</li><li>全局变量会绑定到<code>window</code>上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现</li><li>返回闭包时，返回函数不要引用任何循环变量，或者后续会发生变化的变量</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Flask Vue跨域配置</title>
      <link href="2020/10/27/%E9%85%8D%E7%BD%AEFlask+Vue%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
      <url>2020/10/27/%E9%85%8D%E7%BD%AEFlask+Vue%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<ul><li><h4 id="配置Flask"><a href="#配置Flask" class="headerlink" title="配置Flask"></a>配置Flask</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 安装flask_cors</span>pip install flask_cors<span class="token keyword">from</span> flask_cors <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#全局配置</span>CORS<span class="token punctuation">(</span>app<span class="token punctuation">,</span> supports_credentials<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><a id="more"></a></li><li><h4 id="配置Vue"><a href="#配置Vue" class="headerlink" title="配置Vue"></a>配置Vue</h4><p>1.找到config目录下的index.js，在proxyTable下添加配置信息:</p><pre class=" language-js"><code class="language-js"><span class="token string">'/api'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> target<span class="token punctuation">:</span> <span class="token string">'http://localhost:5000/'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//后端接口地址</span> changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//是否允许跨越</span> pathRewrite<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token string">'^/api'</span><span class="token punctuation">:</span> <span class="token string">'http://localhost:5000/'</span> <span class="token comment" spellcheck="true">//路径重写</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9403344-10e8372429b51b34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="proxyTable配置.png"></p><p>  2.在axios中，请求地址改为：’api/xxx/xxx’<br><img src="https://upload-images.jianshu.io/upload_images/9403344-aaa1a996feda6586.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="url.png"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>asyncio.Semaphore控制协程并发量</title>
      <link href="2020/10/14/Python%E4%BD%BF%E7%94%A8asyncio.Semaphore%E6%8E%A7%E5%88%B6%E5%8D%8F%E7%A8%8B%E5%B9%B6%E5%8F%91%E9%87%8F/"/>
      <url>2020/10/14/Python%E4%BD%BF%E7%94%A8asyncio.Semaphore%E6%8E%A7%E5%88%B6%E5%8D%8F%E7%A8%8B%E5%B9%B6%E5%8F%91%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2020/10/12 12:03</span><span class="token comment" spellcheck="true"># @Author  : Wanghairui</span><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> time<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 控制并发数 20</span>    sem <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>Semaphore<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span>asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>print_something<span class="token punctuation">(</span><span class="token string">"c"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> sem<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token operator">*</span>tasks<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"运行结束"</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span>t<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> t <span class="token keyword">in</span> tasks<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    elapsed <span class="token operator">=</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>elapsed<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">print_something</span><span class="token punctuation">(</span>thing<span class="token punctuation">,</span> sem<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> sem<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>thing<span class="token punctuation">)</span>        <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"A"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 协程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo指令</title>
      <link href="2019/07/27/hexo%E6%8C%87%E4%BB%A4/"/>
      <url>2019/07/27/hexo%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo指令"><a href="#hexo指令" class="headerlink" title="hexo指令"></a>hexo指令</h2><h5 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h5><pre><code>hexo ghexo shttp://localhost:4000/</code></pre><h5 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h5><pre><code>hexo cleanhexo ghexo d</code></pre>]]></content>
      
      
      <categories>
          
          <category> 指令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指令 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
