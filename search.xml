<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>当Clickhouse Distributed遇到ReplacingMergeTree</title>
      <link href="2021/09/07/%E5%BD%93Clickhouse%20Distributed%E9%81%87%E5%88%B0ReplacingMergeTree/"/>
      <url>2021/09/07/%E5%BD%93Clickhouse%20Distributed%E9%81%87%E5%88%B0ReplacingMergeTree/</url>
      
        <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>​    由于业务限制，数据库中存在大量重复数据，故采用了ReplacingMergeTree表引擎，但后台始终没有进行数据合并。</p><ul><li><p>建表语句</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> xxxx<span class="token punctuation">.</span>xxxx <span class="token keyword">ON</span> CLUSTER xxx<span class="token punctuation">(</span>    user_id String<span class="token punctuation">,</span>    name String<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> ReplacingMergeTree<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">(</span>user_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> xxxx<span class="token punctuation">.</span>xxxx <span class="token keyword">ON</span> CLUSTER xxx <span class="token keyword">as</span> xxxx<span class="token punctuation">.</span>xxxx <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">Distributed</span><span class="token punctuation">(</span><span class="token string">'xxxx'</span><span class="token punctuation">,</span> <span class="token string">'xxxx'</span><span class="token punctuation">,</span> xxxx<span class="token punctuation">,</span> rand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><ul><li><p>查询数据是否有重复</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> xxxx<span class="token punctuation">.</span>xxxx<span class="token number">41905623</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> x <span class="token keyword">FROM</span> xxxx<span class="token punctuation">.</span>xxxx <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token punctuation">[</span>oder_key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token number">41705616</span></code></pre></li><li><p>手动执行数据合并，也没有去除重复数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">OPTIMIZE</span> <span class="token keyword">TABLE</span> <span class="token operator">~</span> <span class="token keyword">ON</span> CLUSTER <span class="token operator">~</span> FINAL<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> xxxx<span class="token punctuation">.</span>xxxx<span class="token number">41905623</span></code></pre></li></ul><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><p>​    分布式表存储数据采用分片存储，如6条数据存3个节点，则每个节点存储2条数据。当发生数据合并时，可能只合并当前节点的数据。最终也在这<a href="https://stackoverflow.com/questions/62616949/deduplication-in-distributed-clickhouse-table%EF%BC%8C%E9%AA%8C%E8%AF%81%E4%BA%86%E8%BF%99%E4%B8%80%E7%8C%9C%E6%83%B3%E3%80%82">https://stackoverflow.com/questions/62616949/deduplication-in-distributed-clickhouse-table，验证了这一猜想。</a></p><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>​    创建分布式表时，不使用rand()进行随机分布，使用user_id进行分片，使相同user_id的数据在写入时落在相同的节点。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> xxxx<span class="token punctuation">.</span>xxxx <span class="token keyword">ON</span> CLUSTER xxx <span class="token keyword">as</span> xxxx<span class="token punctuation">.</span>xxxx <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">Distributed</span><span class="token punctuation">(</span><span class="token string">'xxxx'</span><span class="token punctuation">,</span> <span class="token string">'xxxx'</span><span class="token punctuation">,</span> xxxx<span class="token punctuation">,</span> user_id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ClickHouse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReplacingMergeTree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pyinstall打包ssl验证错误</title>
      <link href="2021/05/28/Pyinstall%E6%89%93%E5%8C%85ssl%E9%AA%8C%E8%AF%81%E9%94%99%E8%AF%AF/"/>
      <url>2021/05/28/Pyinstall%E6%89%93%E5%8C%85ssl%E9%AA%8C%E8%AF%81%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>使用Google api，程序能正常运行，但使用PyInstaller打包后出现ssl验证错误</p><blockquote><p>Error: Exception in ‘grpc._cython.cygrpc.ssl_roots_override_callback’ ignored</p><p>assertion failed: pem_root_certs != nullptr</p></blockquote><a id="more"></a><ul><li><p>解决办法</p><p>找到Python安装路径下的\Lib\site-packages\grpc_cython_credentials\roots.pem,</p><p>并拷贝到打包后的exe文件目录下。</p></li></ul><ul><li><p>参考链接</p><blockquote><p><a href="https://github.com/grpc/grpc/issues/9223#issuecomment-412054216">https://github.com/grpc/grpc/issues/9223#issuecomment-412054216</a></p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyInstaller </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5解决界面显示不全和假死</title>
      <link href="2021/05/24/PyQt5%E9%98%B2%E6%AD%A2%E7%95%8C%E9%9D%A2%E6%98%BE%E7%A4%BA%E4%B8%8D%E5%85%A8%E5%92%8C%E5%81%87%E6%AD%BB/"/>
      <url>2021/05/24/PyQt5%E9%98%B2%E6%AD%A2%E7%95%8C%E9%9D%A2%E6%98%BE%E7%A4%BA%E4%B8%8D%E5%85%A8%E5%92%8C%E5%81%87%E6%AD%BB/</url>
      
        <content type="html"><![CDATA[<h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><blockquote><p>在PyQt应用中，当程序执行耗时操作时，界面出现假死卡顿的状态，最终通过Pyqt的多线程（QThread）和信号（pyqtSignal）解决</p></blockquote><a id="more"></a><h5 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h5><ul><li>queryUI.py</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 请求框UI</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># Form implementation generated from reading ui file 'query.ui'</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Created by: PyQt5 UI code generator 5.15.4</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># WARNING: Any manual changes made to this file will be lost when pyuic5 is</span><span class="token comment" spellcheck="true"># run again.  Do not edit this file unless you know what you are doing.</span><span class="token keyword">from</span> PyQt5 <span class="token keyword">import</span> QtCore<span class="token punctuation">,</span> QtGui<span class="token punctuation">,</span> QtWidgets<span class="token keyword">class</span> <span class="token class-name">Ui_Dialog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        Dialog<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">)</span>        Dialog<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">246</span><span class="token punctuation">,</span> <span class="token number">148</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QLabel<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>QRect<span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">131</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        font <span class="token operator">=</span> QtGui<span class="token punctuation">.</span>QFont<span class="token punctuation">(</span><span class="token punctuation">)</span>        font<span class="token punctuation">.</span>setFamily<span class="token punctuation">(</span><span class="token string">"Agency FB"</span><span class="token punctuation">)</span>        font<span class="token punctuation">.</span>setPointSize<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setFont<span class="token punctuation">(</span>font<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">"label"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>retranslateUi<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>        QtCore<span class="token punctuation">.</span>QMetaObject<span class="token punctuation">.</span>connectSlotsByName<span class="token punctuation">(</span>Dialog<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">retranslateUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>        _translate <span class="token operator">=</span> QtCore<span class="token punctuation">.</span>QCoreApplication<span class="token punctuation">.</span>translate        Dialog<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span>_translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> <span class="token string">"测试请求"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>_translate<span class="token punctuation">(</span><span class="token string">"Dialog"</span><span class="token punctuation">,</span> <span class="token string">"正在请求 . . ."</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>testUI.py</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 主界面UI</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># Form implementation generated from reading ui file 'test.ui'</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Created by: PyQt5 UI code generator 5.15.4</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># WARNING: Any manual changes made to this file will be lost when pyuic5 is</span><span class="token comment" spellcheck="true"># run again.  Do not edit this file unless you know what you are doing.</span><span class="token keyword">from</span> PyQt5 <span class="token keyword">import</span> QtCore<span class="token punctuation">,</span> QtGui<span class="token punctuation">,</span> QtWidgets<span class="token keyword">class</span> <span class="token class-name">Ui_Form</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Form<span class="token punctuation">)</span><span class="token punctuation">:</span>        Form<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">"Form"</span><span class="token punctuation">)</span>        Form<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">276</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QPushButton<span class="token punctuation">(</span>Form<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>QRect<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">"pushButton"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>retranslateUi<span class="token punctuation">(</span>Form<span class="token punctuation">)</span>        QtCore<span class="token punctuation">.</span>QMetaObject<span class="token punctuation">.</span>connectSlotsByName<span class="token punctuation">(</span>Form<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">retranslateUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Form<span class="token punctuation">)</span><span class="token punctuation">:</span>        _translate <span class="token operator">=</span> QtCore<span class="token punctuation">.</span>QCoreApplication<span class="token punctuation">.</span>translate        Form<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span>_translate<span class="token punctuation">(</span><span class="token string">"Form"</span><span class="token punctuation">,</span> <span class="token string">"主菜单"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>_translate<span class="token punctuation">(</span><span class="token string">"Form"</span><span class="token punctuation">,</span> <span class="token string">"测试"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>main.py</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 逻辑代码</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2021/5/18 10:19</span><span class="token comment" spellcheck="true"># @Author  : Wanghairui</span><span class="token comment" spellcheck="true"># @function:</span><span class="token keyword">import</span> sys<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> pyqtSignal<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QMainWindow<span class="token punctuation">,</span> QMessageBox<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>Qt <span class="token keyword">import</span> QThread<span class="token keyword">from</span> testUI <span class="token keyword">import</span> Ui_Form<span class="token keyword">from</span> queryUI <span class="token keyword">import</span> Ui_Dialog<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">class</span> <span class="token class-name">MyMainForm</span><span class="token punctuation">(</span>QMainWindow<span class="token punctuation">,</span> Ui_Form<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>MyMainForm<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>thread_query <span class="token operator">=</span> QueryThread<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建线程</span>        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>queryUI <span class="token operator">=</span> queryForm<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pushButton<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>query<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">query</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 绑定信号到指定回调</span>        self<span class="token punctuation">.</span>thread_query<span class="token punctuation">.</span>signal<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>callback<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>queryUI<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>thread_query<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 开始线程</span>    <span class="token comment" spellcheck="true"># 回调函数</span>    <span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>queryUI<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        QMessageBox<span class="token punctuation">.</span>about<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"完成"</span><span class="token punctuation">,</span> <span class="token string">"请求完成"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">queryForm</span><span class="token punctuation">(</span>QMainWindow<span class="token punctuation">,</span> Ui_Dialog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>queryForm<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>parent<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">QueryThread</span><span class="token punctuation">(</span>QThread<span class="token punctuation">)</span><span class="token punctuation">:</span>    signal <span class="token operator">=</span> pyqtSignal<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 运行结束，发送信号执行回调</span>        self<span class="token punctuation">.</span>signal<span class="token punctuation">.</span>emit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    myWin <span class="token operator">=</span> MyMainForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    myWin<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python日期时间转换</title>
      <link href="2021/05/14/Python%E6%97%B6%E9%97%B4%E4%B8%8E%E6%97%B6%E9%97%B4%E6%88%B3%E4%BA%92%E8%BD%AC/"/>
      <url>2021/05/14/Python%E6%97%B6%E9%97%B4%E4%B8%8E%E6%97%B6%E9%97%B4%E6%88%B3%E4%BA%92%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<h4 id="Python日期时间转换"><a href="#Python日期时间转换" class="headerlink" title="Python日期时间转换"></a>Python日期时间转换</h4><ul><li><p>时间转时间戳（UNIX时间戳）</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> timecus_date_time <span class="token operator">=</span> <span class="token string">"2021-05-11 00:00:00"</span>timeArray <span class="token operator">=</span> time<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>cus_date_time<span class="token punctuation">,</span> <span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span>cus_timestamp <span class="token operator">=</span> time<span class="token punctuation">.</span>mktime<span class="token punctuation">(</span>timeArray<span class="token punctuation">)</span></code></pre></li></ul><a id="more"></a>  <ul><li><p>时间戳转时间</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> timecus_timestamp <span class="token operator">=</span> <span class="token number">1620662400</span><span class="token comment" spellcheck="true"># 加time.timezone转为UTC时间，不加为系统时间</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>cus_timestamp <span class="token operator">+</span> time<span class="token punctuation">.</span>timezone<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ul><ul><li><p>时间转字符串</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetimenow <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span>now_str <span class="token operator">=</span> now<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>now_str<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>now_str<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ul><ul><li><p>字符串转时间</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetimenow_str <span class="token operator">=</span> <span class="token string">'2021-05-12 16:47:16'</span>now <span class="token operator">=</span> datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>now_str<span class="token punctuation">,</span> <span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ul><ul><li><p>时间加减</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> timedeltanow <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span>now <span class="token operator">=</span> now <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> hours<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7安装三节点Hadoop集群</title>
      <link href="2021/03/22/CentOS7%E5%AE%89%E8%A3%85%E4%B8%89%E8%8A%82%E7%82%B9Hadoop%E9%9B%86%E7%BE%A4/"/>
      <url>2021/03/22/CentOS7%E5%AE%89%E8%A3%85%E4%B8%89%E8%8A%82%E7%82%B9Hadoop%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="一-服务器配置"><a href="#一-服务器配置" class="headerlink" title="一 服务器配置"></a>一 服务器配置</h4><ul><li><p>关闭防火墙</p><pre class=" language-shell"><code class="language-shell"># 查看状态firewall-cmd --state# 停止防火墙systemctl stop firewalld.service# 禁止开机自启动systemctl disable firewalld.service</code></pre></li><li><p>关闭selinux</p><pre class=" language-shell"><code class="language-shell">vi /etc/sysconfig/selinuxSELINUX=disabled</code></pre><a id="more"></a></li></ul><h4 id="二-网络配置"><a href="#二-网络配置" class="headerlink" title="二 网络配置"></a>二 网络配置</h4><ul><li><p>找到待配置网卡</p><pre class=" language-shell"><code class="language-shell">cd /etc/sysconfig/network-scripts/ls# 这里选择ifcfg-enp3s0vi ifcfg-enp3s0</code></pre></li><li><p>修改下列配置</p><pre class=" language-shell"><code class="language-shell">BOOTPROTO=staticONBOOT=yesIPADDR=192.168.0.200GATEWAY=192.168.0.1DNS1=8.8.8.8</code></pre></li><li><p>网络测试</p><pre class=" language-shell"><code class="language-shell">service network restart# 局域网测试ping 192.168.0.229# 外网测试ping www.baidu.com</code></pre></li></ul><h4 id="三-安装Java"><a href="#三-安装Java" class="headerlink" title="三 安装Java"></a>三 安装Java</h4><ul><li><p>创建安装目录</p><pre class=" language-shell"><code class="language-shell">cd /home/whrmkdir javacd java</code></pre></li><li><p>安装wget</p><pre class=" language-shell"><code class="language-shell">yum -y install wget</code></pre></li></ul><ul><li><p>下载解压</p><p>使用wget下载或通过官网下载后，使用WinSCP传到 /home/whr/java 目录下</p><pre class=" language-shell"><code class="language-shell">cd /home/whr/javatar -zxvf jdk-8u281-linux-x64.tar.gz</code></pre></li><li><p>设置环境变量</p><pre class=" language-shell"><code class="language-shell">vi /etc/profile# 末尾添加export JAVA_HOME=/home/whr/java/jdk1.8.0_281export JRE_HOME=$&#123;JAVA_HOME&#125;/jreexport CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/libexport PATH=$&#123;JAVA_HOME&#125;/bin:$PATH# 激活环境变量source /etc/profile</code></pre></li><li><p>添加软链接</p><pre class=" language-shell"><code class="language-shell">ln -s /home/whr/java/jdk1.8.0_281/bin/java /usr/bin/java</code></pre></li><li><p>安装完成</p><pre class=" language-shell"><code class="language-shell">java -version</code></pre></li></ul><h4 id="四-配置hosts"><a href="#四-配置hosts" class="headerlink" title="四 配置hosts"></a>四 配置hosts</h4><ul><li><p>节点规划</p><table><thead><tr><th>IP</th><th>NodeType</th><th>Name</th></tr></thead><tbody><tr><td>192.168.0.200</td><td>DataNode</td><td>slave1</td></tr><tr><td>192.168.0.201</td><td>DataNode</td><td>slave2</td></tr><tr><td>192.168.0.202</td><td>NameNode / DataNode</td><td>master</td></tr></tbody></table></li><li><p>hosts 配置</p><pre class=" language-shell"><code class="language-shell">vi /etc/hosts# 配置如下127.0.0.1   localhost192.168.0.200 slave1192.168.0.201 slave2192.168.0.202 master</code></pre></li></ul><h4 id="五-配置SSH（主节点）"><a href="#五-配置SSH（主节点）" class="headerlink" title="五 配置SSH（主节点）"></a>五 配置SSH（主节点）</h4><ul><li><p>修改配置文件</p><pre class=" language-shell"><code class="language-shell">vi /etc/ssh/sshd_configAuthorizedKeysFile      .ssh/authorized_keysPubkeyAuthentication yes</code></pre></li><li><p>生成秘钥</p><pre class=" language-shell"><code class="language-shell">ssh-keygen -t dsa -P '' -f ~/.ssh/id_dsa</code></pre></li></ul><ul><li><p>分发公钥</p><pre class=" language-shell"><code class="language-shell">ssh-copy-id -i ~/.ssh/id_dsa.pub masterssh-copy-id -i ~/.ssh/id_dsa.pub slave1ssh-copy-id -i ~/.ssh/id_dsa.pub slave2# 验证ssh masterssh slave1ssh slave2</code></pre></li></ul><h4 id="六-安装Hadoop（主节点）"><a href="#六-安装Hadoop（主节点）" class="headerlink" title="六 安装Hadoop（主节点）"></a>六 安装Hadoop（主节点）</h4><ul><li><p>下载</p><pre class=" language-shell"><code class="language-shell">cd /home/whrmkdir hadoopcd hadoopwget https://mirrors.tuna.tsinghua.edu.cn/apache/hadoop/common/hadoop-3.2.1/hadoop-3.2.1.tar.gz# 或本地下载使用WinSCP传送</code></pre></li><li><p>安装</p><pre class=" language-shell"><code class="language-shell">tar zxvf hadoop-3.2.1.tar.gz# 创建软链接ln -s /home/whr/hadoop/hadoop-3.2.1  /usr/local/hadoop</code></pre></li><li><p>配置Hadoop环境变量</p><pre class=" language-shell"><code class="language-shell">vi /etc/profile# 末尾添加export HADOOP_HOME=/home/whr/hadoop/hadoop-3.2.1export PATH=$&#123;HADOOP_HOME&#125;/bin:$PATHsource /etc/profile</code></pre></li><li><p>修改配置文件</p><pre class=" language-shell"><code class="language-shell">cd /usr/local/hadoop/etc/hadoop</code></pre><ul><li><p>配置hadoop-env.sh</p><pre class=" language-shell"><code class="language-shell">vi hadoop-env.shexport JAVA_HOME=/home/whr/java/jdk1.8.0_281</code></pre></li><li><p>配置core-site.xml</p><pre class=" language-shell"><code class="language-shell">vi core-site.xml<configuration>    <property>      <name>hadoop.tmp.dir</name>   <value>/home/whr/hadoop/tmp</value>   <description>Abase for other temporary directories.</description>    </property>    <property>      <name>fs.default.name</name>      <value>hdfs://master:9000</value>    </property></configuration></code></pre></li><li><p>配置hdfs-site.xml</p><pre class=" language-shell"><code class="language-shell">vi hdfs-site.xml<configuration>    <property>      <name>dfs.namenode.name.dir</name>      <value>/home/whr/hadoop/dfs/name</value>    </property>    <property>      <name>dfs.datanode.data.dir</name>      <value>/home/whr/hadoop/dfs/data</value>    </property></configuration></code></pre></li><li><p>配置yarn-site.xml</p><pre class=" language-shell"><code class="language-shell">vi yarn-site.xml<configuration>    <property>      <name>yarn.nodemanager.aux-services</name>      <value>mapreduce_shuffle</value>    </property>    <property>      <name>yarn.nodemanager.aux-services.mapreduce_shuffle.class</name>      <value>org.apache.hadoop.mapred.ShuffleHandler</value>    </property>    <property>      <name>yarn.resourcemanager.hostname</name>      <value>master</value>    </property></configuration></code></pre></li><li><p>配置mapred-site.xml</p><pre class=" language-shell"><code class="language-shell">vi mapred-site.xml<configuration>    <property>      <name>mapred.job.tracker</name>      <value>master:49001</value>    </property>    <property>      <name>mapred.local.dir</name>      <value>/home/whr/hadoop/var</value>    </property>    <property>      <name>mapreduce.framework.name</name>      <value>yarn</value>    </property></configuration></code></pre></li><li><p>配置workers</p><pre class=" language-shell"><code class="language-shell">vi workersmasterslave1slave2</code></pre></li><li><p>修改hdfs启动和停止脚本</p><pre class=" language-shell"><code class="language-shell">cd /usr/local/hadoop/sbinvi start-dfs.shvi stop-dfs.sh# 在最前面加如下内容HDFS_DATANODE_USER=rootHADOOP_SECURE_DN_USER=rootHDFS_NAMENODE_USER=rootHDFS_SECONDARYNAMENODE_USER=root</code></pre></li><li><p>修改yarn启动和停止脚本</p><pre class=" language-shell"><code class="language-shell">cd /usr/local/hadoop/sbinvi start-yarn.shvi stop-yarn.sh# 在文件前添加如下内容YARN_RESOURCEMANAGER_USER=rootHADOOP_SECURE_DN_USER=rootYARN_NODEMANAGER_USER=root</code></pre></li></ul></li><li><p>从节点配置Hadoop</p><pre class=" language-shell"><code class="language-shell"># 将配置好的Hadoop复制到从节点scp -r /home/whr/hadoop/hadoop-3.2.1 root@192.168.0.201:/home/whr/hadoop/# 设置软链接ssh slave1ln -s /home/whr/hadoop/hadoop-3.2.1  /usr/local/hadoopexitssh slave2ln -s /home/whr/hadoop/hadoop-3.2.1  /usr/local/hadoopexit</code></pre></li></ul><h4 id="七-启动测试"><a href="#七-启动测试" class="headerlink" title="七 启动测试"></a>七 启动测试</h4><ul><li><p>格式化namenode</p><pre class=" language-shell"><code class="language-shell">hdfs namenode -format# 重新格式化需要删除tmp和dfs文件夹</code></pre></li><li><p>启动hdfs</p><pre class=" language-shell"><code class="language-shell">cd /usr/local/hadoop/sbinbash start-all.sh</code></pre></li><li><p>启动yarn</p><pre class=" language-shell"><code class="language-shell">bash start-all.sh</code></pre></li><li><p>验证</p><pre class=" language-shell"><code class="language-shell">jps4800 NodeManager4002 NameNode4387 SecondaryNameNode4666 ResourceManager13355 Jps4126 DataNode</code></pre></li></ul><h1 id="客户端访问"><a href="#客户端访问" class="headerlink" title="客户端访问"></a>客户端访问</h1><p>  <a href="http://192.168.0.202:9870/">http://192.168.0.202:9870/</a><br>  <a href="http://192.168.0.202:8088/">http://192.168.0.202:8088/</a></p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Pyinstaller打包配置文件</title>
      <link href="2021/03/05/Pyinstaller%20%E6%89%93%E5%8C%85%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
      <url>2021/03/05/Pyinstaller%20%E6%89%93%E5%8C%85%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
      
        <content type="html"><![CDATA[<p>Pyinstaller 打包配置文件夹</p><a id="more"></a><ol><li><p>生成资源文件目录访问路径</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">resource_path</span><span class="token punctuation">(</span>relative_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> getattr<span class="token punctuation">(</span>sys<span class="token punctuation">,</span> <span class="token string">'frozen'</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        base_path <span class="token operator">=</span> sys<span class="token punctuation">.</span>_MEIPASS    <span class="token keyword">else</span><span class="token punctuation">:</span>        base_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>base_path<span class="token punctuation">,</span> relative_path<span class="token punctuation">)</span></code></pre></li><li><p>修改需要读取路径的文件或文件夹</p><pre class=" language-python"><code class="language-python">resource_path<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">,</span> <span class="token string">"data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>打包py文件生成.spec文件</p><pre class=" language-powershell"><code class="language-powershell">pyinstaller <span class="token operator">-</span>F QueryGui<span class="token punctuation">.</span>py</code></pre></li><li><p>修改.spec文件中datas项，添加配置文件目录和待生成的文件夹名</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> Analysis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             pathex<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             binaries<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             datas<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'config'</span><span class="token punctuation">,</span> <span class="token string">'config'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre></li><li><p>删除build和dist文件夹，重新生成打包文件</p><pre><code>pyinstaller -F QueryGui.spec</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一次虚拟环境踩坑</title>
      <link href="2021/03/02/%E4%B8%80%E6%AC%A1%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E8%B8%A9%E5%9D%91/"/>
      <url>2021/03/02/%E4%B8%80%E6%AC%A1%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>Python venv虚拟环境 pip安装失败， 实际环境安装成功</p><pre><code>pip install --upgrade pip 🤬🤬🤬</code></pre><p>当由于权限更新失败后，运行easy_install pip</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Selenium获取请求信息</title>
      <link href="2021/01/26/Selenium%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E4%BF%A1%E6%81%AF/"/>
      <url>2021/01/26/Selenium%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>​    在获取facebook analytics数据时，抓取到的请求需要携带token，且具有时效性。</p><a id="more"></a><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><ol><li>JS逆向分析token生成过程及逻辑（难度较大，尝试无果后放弃）</li><li>使用selenium模拟请求，将过程交给浏览器，只需要获取结果</li></ol><h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriveroption <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>ChromeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用本地cookie, 运行时需关闭已打开的浏览器</span>option<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span>r<span class="token string">'--user-data-dir=C:\...\User Data'</span><span class="token punctuation">)</span>option<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--profile-directory=Default'</span><span class="token punctuation">)</span>browser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>options<span class="token operator">=</span>option<span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.facebook.com/analytics/"</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取selenium执行了那些请求的关键</span>test <span class="token operator">=</span> browser<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">"var performance = window.performance || window.mozPerformance || window.msPerformance || window.webkitPerformance || &amp;#123;&amp;#125;; var network = performance.getEntries() || &amp;#123;&amp;#125;; return network;"</span><span class="token punctuation">)</span>access_token <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> item <span class="token keyword">in</span> test<span class="token punctuation">:</span>  <span class="token keyword">if</span> <span class="token string">"access_token"</span> <span class="token keyword">in</span> item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    access_token <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>access_token<span class="token punctuation">)</span>browser<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python剑指27 - 二叉树的镜像</title>
      <link href="2021/01/19/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/"/>
      <url>2021/01/19/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://leetcode-cn.com/problems/er-cha-shu-de-jing-xiang-lcof/">题目来源</a></p></blockquote><ul><li><p>描述</p><p>请完成一个函数，输入一个二叉树，该函数输出它的镜像。</p><a id="more"></a><p>例如输入：</p><pre><code>     4   /   \  2     7 / \   / \1   3 6   9</code></pre><p>镜像输出：</p><pre><code>     4   /   \  7     2 / \   / \9   6 3   1</code></pre><p>示例 1：</p><pre><code>输入：root = [4,2,7,1,3,6,9]输出：[4,7,2,9,6,3,1]</code></pre></li></ul><ul><li>分析</li></ul><ol><li><p>使用递归解决，分别递归左右子节点，结束条件为root为空。每次递归时交换当前节点的左右子节点。</p><p>时间复杂度：O(N)</p><p>空间复杂度：O(N)</p></li></ol><ol start="2"><li><p>使用迭代</p><p>将所有节点放入列表，并交换每个节点的左右子节点</p></li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token comment" spellcheck="true"># 递归</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mirrorTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> TreeNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span>        root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> root<span class="token punctuation">.</span>left        self<span class="token punctuation">.</span>mirrorTree<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mirrorTree<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">return</span> root<span class="token comment" spellcheck="true"># 迭代</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mirrorTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> TreeNode<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span>        node_list <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>        <span class="token keyword">while</span> node_list<span class="token punctuation">:</span>            cur_node <span class="token operator">=</span> node_list<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> cur_node<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                node_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur_node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            <span class="token keyword">if</span> cur_node<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                node_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur_node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            cur_node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> cur_node<span class="token punctuation">.</span>right <span class="token operator">=</span>  cur_node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> cur_node<span class="token punctuation">.</span>left        <span class="token keyword">return</span> root</code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集及Python实现</title>
      <link href="2021/01/18/%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%8F%8APython%E5%AE%9E%E7%8E%B0/"/>
      <url>2021/01/18/%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%8F%8APython%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>并查集：在计算机科学中，<strong>并查集</strong>是一种树型的<strong>数据结构</strong>，用于处理一些<strong>不交集</strong>（Disjoint Sets）的合并及查询问题。   —wiki</p></blockquote><a id="more"></a><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>​    并查集，顾名思义，包含了<strong>合并</strong>和<strong>查询</strong>操作，用于解决动态连通性问题。</p><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 主体框架</span><span class="token keyword">class</span> <span class="token class-name">UnionFind</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 初始化</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true"># 查询根节点</span>    <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true"># 合并节点</span>    <span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true"># 判断两个节点是否连通</span>    <span class="token keyword">def</span> <span class="token function">is_same_set</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span></code></pre><ul><li><p>初始化</p><p>将所有节点的父节点设为None</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> M<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>father_dict <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>    <span class="token comment" spellcheck="true"># 记录集合的数量，一般为返回值</span>    self<span class="token punctuation">.</span>nums_set <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>father_dict<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>father_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> None            <span class="token comment" spellcheck="true"># 集合的数量+1</span>            self<span class="token punctuation">.</span>nums_set <span class="token operator">+=</span> <span class="token number">1</span></code></pre></li><li><p>查询</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>    root <span class="token operator">=</span> x    <span class="token keyword">while</span> self<span class="token punctuation">.</span>father_dict<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">!=</span> None<span class="token punctuation">:</span>        root <span class="token operator">=</span> self<span class="token punctuation">.</span>father_dict<span class="token punctuation">[</span>root<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 路径压缩</span>    <span class="token keyword">while</span> x <span class="token operator">!=</span> root<span class="token punctuation">:</span>        cur_father <span class="token operator">=</span> self<span class="token punctuation">.</span>father_dict<span class="token punctuation">[</span>x<span class="token punctuation">]</span>        self<span class="token punctuation">.</span>father_dict<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> root        x <span class="token operator">=</span> cur_father    <span class="token keyword">return</span> root</code></pre></li><li><p>合并</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    a_root<span class="token punctuation">,</span> b_root <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 任意指定一个节点为父节点</span>    <span class="token keyword">if</span> a_root <span class="token operator">!=</span> b_root<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>father_dict<span class="token punctuation">[</span>a_root<span class="token punctuation">]</span> <span class="token operator">=</span> b_root        self<span class="token punctuation">.</span>nums_set <span class="token operator">-=</span> <span class="token number">1</span></code></pre></li><li><p>判断是否在同一集合</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_same_set</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比较两个dataframe的差异</title>
      <link href="2021/01/18/%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AAdataframe%E7%9A%84%E5%B7%AE%E5%BC%82/"/>
      <url>2021/01/18/%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AAdataframe%E7%9A%84%E5%B7%AE%E5%BC%82/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考来源：<a href="https://stackoverflow.com/questions/20225110/comparing-two-dataframes-and-getting-the-differences">https://stackoverflow.com/questions/20225110/comparing-two-dataframes-and-getting-the-differences</a></p></blockquote><a id="more"></a><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 合并两个dataframe</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 重设索引，并防止将旧索引转为列</span>df <span class="token operator">=</span> df<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 按相同值分组</span>df_gpby <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>list<span class="token punctuation">(</span>df<span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取唯一值的索引</span>idx <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> df_gpby<span class="token punctuation">.</span>groups<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> len<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 取出包含唯一值的记录</span>df<span class="token punctuation">.</span>reindex<span class="token punctuation">(</span>idx<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas浅析</title>
      <link href="2021/01/07/pandas%E6%80%BB%E7%BB%93/"/>
      <url>2021/01/07/pandas%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h4 id="创建DataFrame"><a href="#创建DataFrame" class="headerlink" title="创建DataFrame"></a>创建DataFrame</h4><p>​    <a id="more"></a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd</code></pre><ol><li><p>读取csv文件并转为DataFrame</p><pre class=" language-Python"><code class="language-Python">csv_data = pd.read_csv("test_data.csv", encoding = "ISO-8859-1")</code></pre></li></ol><ol start="2"><li><p>字典转为DataFrame</p><pre class=" language-Python"><code class="language-Python">d = &#123;'col1': [1, 2], 'col2': [3, 4]&#125;df = pd.DataFrame(data=d)</code></pre><table><thead><tr><th align="right"></th><th align="right">col1</th><th align="right"><strong>col2</strong></th></tr></thead><tbody><tr><td align="right">0</td><td align="right">1</td><td align="right">3</td></tr><tr><td align="right">1</td><td align="right">2</td><td align="right">4</td></tr></tbody></table></li><li><p>双层列表转为DataFrame</p><pre class=" language-Python"><code class="language-Python">data = [['tom', 10], ['nick', 15], ['juli', 14]] # Create the pandas DataFrame df = pd.DataFrame(data, columns = ['Name', 'Age']) </code></pre><table><thead><tr><th align="right"></th><th align="right">Name</th><th align="right">Age</th></tr></thead><tbody><tr><td align="right">0</td><td align="right">tom</td><td align="right">10</td></tr><tr><td align="right">1</td><td align="right">nick</td><td align="right">15</td></tr><tr><td align="right">2</td><td align="right">juli</td><td align="right">14</td></tr></tbody></table></li><li><p>列表字典转DataFrame</p><pre class=" language-Python"><code class="language-Python">data = [&#123;'a': 1, 'b': 2, 'c':3&#125;,         &#123;'a':10, 'b': 20, 'c': 30&#125;] # Creates DataFrame. df = pd.DataFrame(data) </code></pre><table><thead><tr><th align="right"></th><th align="right">a</th><th align="right">b</th><th align="right">c</th></tr></thead><tbody><tr><td align="right">0</td><td align="right">1</td><td align="right">2</td><td align="right">3</td></tr><tr><td align="right">1</td><td align="right">10</td><td align="right">20</td><td align="right">30</td></tr></tbody></table></li><li><p>指定index</p><pre class=" language-python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span> index <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'rank1'</span><span class="token punctuation">,</span>                                 <span class="token string">'rank2'</span><span class="token punctuation">,</span>                                 <span class="token string">'rank3'</span><span class="token punctuation">,</span>                                 <span class="token string">'rank4'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></li></ol><h4 id="修改DataFrame值"><a href="#修改DataFrame值" class="headerlink" title="修改DataFrame值"></a>修改DataFrame值</h4><ol><li><p>修改一列的值</p><pre class=" language-Python"><code class="language-Python">df["data"] = df["data"].map(lambda x: 0)</code></pre></li><li><p>修改多列的值</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> index<span class="token punctuation">,</span> row <span class="token keyword">in</span> df_res<span class="token punctuation">.</span>iterrows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    df_res<span class="token punctuation">.</span>at<span class="token punctuation">[</span>index<span class="token punctuation">,</span> <span class="token string">'data1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    df_res<span class="token punctuation">.</span>at<span class="token punctuation">[</span>index<span class="token punctuation">,</span> <span class="token string">'data2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span></code></pre></li></ol><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><ol><li><p>整体转为str</p><pre class=" language-Python"><code class="language-Python">df = df.astype(str)</code></pre></li><li><p>整体转为int</p><pre class=" language-python"><code class="language-python">df <span class="token operator">=</span> df<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>int<span class="token punctuation">)</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python装饰器实现日志输出</title>
      <link href="2020/11/20/Python%E8%A3%85%E9%A5%B0%E5%99%A8%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA/"/>
      <url>2020/11/20/Python%E8%A3%85%E9%A5%B0%E5%99%A8%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2020/11/20 11:33</span><span class="token comment" spellcheck="true"># @Author  : Wanghairui</span><span class="token comment" spellcheck="true"># @function:</span><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps<span class="token keyword">import</span> logging<span class="token keyword">def</span> <span class="token function">_create_logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">'LogError'</span><span class="token punctuation">)</span>    logger<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span>    file_handler <span class="token operator">=</span> logging<span class="token punctuation">.</span>FileHandler<span class="token punctuation">(</span>r<span class="token string">'./MJlogs.log'</span><span class="token punctuation">)</span>    log_format <span class="token operator">=</span> <span class="token string">'%(levelname)s %(asctime)s %(message)s'</span>    formatter <span class="token operator">=</span> logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span>log_format<span class="token punctuation">)</span>    file_handler<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>formatter<span class="token punctuation">)</span>    logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>file_handler<span class="token punctuation">)</span>    <span class="token keyword">return</span> logger<span class="token keyword">def</span> <span class="token function">logged</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    @wraps<span class="token punctuation">(</span>func<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">do_logging</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            logger <span class="token operator">=</span> _create_logger<span class="token punctuation">(</span><span class="token punctuation">)</span>            error_msg <span class="token operator">=</span> <span class="token string">'And error has occurred at /'</span> <span class="token operator">+</span> func<span class="token punctuation">.</span>__name__ <span class="token operator">+</span> <span class="token string">'\n'</span>            logger<span class="token punctuation">.</span>exception<span class="token punctuation">(</span>error_msg<span class="token punctuation">)</span>            <span class="token keyword">return</span> e    <span class="token keyword">return</span> do_logging</code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python虚拟环境配置</title>
      <link href="2020/11/16/Python%E4%BD%BF%E7%94%A8Virtualenv%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
      <url>2020/11/16/Python%E4%BD%BF%E7%94%A8Virtualenv%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h4 id="Python-配置Windows10-virtualenv环境"><a href="#Python-配置Windows10-virtualenv环境" class="headerlink" title="Python 配置Windows10 virtualenv环境"></a>Python 配置Windows10 virtualenv环境</h4><ol><li><p>安装 virtualenv</p><pre class=" language-shell"><code class="language-shell">pip install virtualenv</code></pre><a id="more"></a></li><li><p>切换到项目目录下，创建虚拟环境</p><blockquote><p>virtualenv -p python解释器 虚拟环境名</p></blockquote><pre class=" language-shell"><code class="language-shell">virtualenv -p python testenv</code></pre></li><li><p>进入虚拟环境下的Scripts</p><pre class=" language-shell"><code class="language-shell">cd testenv/Scripts</code></pre></li><li><p>使用虚拟环境</p><pre class=" language-shell"><code class="language-shell">activate</code></pre></li><li><p>安装requirements.txt所需的模块</p><pre class=" language-shell"><code class="language-shell">pip install -r requirements.txt</code></pre></li><li><p>退出虚拟环境</p><pre class=" language-shell"><code class="language-shell">deactivate</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python生产者消费者模型</title>
      <link href="2020/11/06/Python%20%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/"/>
      <url>2020/11/06/Python%20%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> queue<span class="token keyword">import</span> threading<span class="token keyword">class</span> <span class="token class-name">ThreadProductorConsumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 初始化模型</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 大小为15的缓冲池，用于容纳产品</span>        self<span class="token punctuation">.</span>q <span class="token operator">=</span> queue<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>screen_lock <span class="token operator">=</span> threading<span class="token punctuation">.</span>Semaphore<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">productor</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> product<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 生产者不停的每3秒生产一个产品</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>product<span class="token punctuation">)</span>            cur_time <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            cur_name <span class="token operator">=</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name            <span class="token comment" spellcheck="true"># print是线程不安全的,需要信号量确保没有冲突</span>            self<span class="token punctuation">.</span>screen_lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>cur_time<span class="token operator">+</span><span class="token string">"  "</span> <span class="token operator">+</span> cur_name <span class="token operator">+</span> <span class="token string">" 生产了一个产品"</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>screen_lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">consumer</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 消费者不停的每2秒消费一个产品</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>            cur_time <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            cur_name <span class="token operator">=</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name            self<span class="token punctuation">.</span>screen_lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>cur_time <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span> cur_name <span class="token operator">+</span> <span class="token string">" 消费了一个产品"</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>screen_lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    tpc <span class="token operator">=</span> ThreadProductorConsumer<span class="token punctuation">(</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> <span class="token string">"product"</span>    <span class="token comment" spellcheck="true"># 实例化了3个生产者</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>tpc<span class="token punctuation">.</span>productor<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 实例化了6个消费者</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        v <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>tpc<span class="token punctuation">.</span>consumer<span class="token punctuation">)</span>        v<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript浅析</title>
      <link href="2020/10/27/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2020/10/27/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、数据类型"><a href="#一、数据类型" class="headerlink" title="一、数据类型"></a>一、数据类型</h2><ul><li><p>Number :</p><ul><li>整数，浮点数，NaN（Not a Number）,Infinity（无限大）</li><li>NaN 与任何值都不相同，包括自己，可通过isNaN()函数判断NaN</li></ul></li></ul><a id="more"></a><ul><li><p><strong>字符串</strong></p><ul><li><p>多行字符串：``</p></li><li><p>模板字符串</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'小明'</span><span class="token punctuation">;</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token template-string"><span class="token string">`你好, $&amp;#123;name&amp;#125;, 你今年$&amp;#123;age&amp;#125;岁了!`</span></span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>字符串操作</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">'Hello, world!'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// length获取长度</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 13</span><span class="token comment" spellcheck="true">// 获取指定位置字符</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'H'</span><span class="token comment" spellcheck="true">// toUpperCase() 字符串全转为大写</span><span class="token comment" spellcheck="true">// toLowerCase() 字符串全转为小写</span><span class="token comment" spellcheck="true">// indexOf()搜索指定字符串出现的位置</span>s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回7</span><span class="token comment" spellcheck="true">//substring()返回指定索引区间的子串</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从索引0开始到5（不包括5），返回'hello'</span></code></pre></li><li><p>字符串不可变</p></li></ul></li><li><p>布尔值</p></li><li><p>null和undefined，大多数情况下，使用null而不是undefined</p></li></ul><h2 id="二、运算符"><a href="#二、运算符" class="headerlink" title="二、运算符"></a>二、运算符</h2><ul><li><p>==：比较时会自动转换数据类型</p></li><li><p>===：只比较数据类型一致的数据</p></li></ul><h2 id="三、数组"><a href="#三、数组" class="headerlink" title="三、数组"></a>三、数组</h2><ul><li><p>同一数组可以包含不同数据类型</p></li><li><p>数组操作</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//length 获取数组的长度,给length赋值将导致数组长度变化</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">,</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6</span><span class="token comment" spellcheck="true">// indexOf 搜索一个指定的元素的位置</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span><span class="token comment" spellcheck="true">//切片 slice 截取数组的部分元素，返回一个新的数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从索引0开始，到索引3结束，但不包括索引3: ['A', 'B', 'C']</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从索引3开始到结束: ['D', 'E', 'F', 'G']</span><span class="token keyword">var</span> aCopy <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 复制数组</span><span class="token comment" spellcheck="true">//push() 向数组添加若干元素</span><span class="token comment" spellcheck="true">//pop() 删除最后一个元素</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回Array新的长度: 4</span>arr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2, 'A', 'B']</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// pop()返回'B'</span>arr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, 2, 'A']</span><span class="token comment" spellcheck="true">//unshift() 向数组头部添加若干元素</span><span class="token comment" spellcheck="true">// shift() 删除数组的第一个元素</span><span class="token comment" spellcheck="true">//sort() 对数组进行排序，默认顺序</span><span class="token comment" spellcheck="true">//reverse() 反转数组</span><span class="token comment" spellcheck="true">//splice()从指定的索引开始删除若干元素，然后再从该位置添加若干元素</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Microsoft'</span><span class="token punctuation">,</span> <span class="token string">'Apple'</span><span class="token punctuation">,</span> <span class="token string">'Yahoo'</span><span class="token punctuation">,</span> <span class="token string">'AOL'</span><span class="token punctuation">,</span> <span class="token string">'Excite'</span><span class="token punctuation">,</span> <span class="token string">'Oracle'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 从索引2开始删除3个元素,然后再添加两个元素:</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Facebook'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回删除的元素 ['Yahoo', 'AOL', 'Excite']</span>arr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span><span class="token comment" spellcheck="true">// 只删除,不添加:</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['Google', 'Facebook']</span>arr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['Microsoft', 'Apple', 'Oracle']</span><span class="token comment" spellcheck="true">// 只添加,不删除:</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Facebook'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回[],因为没有删除任何元素</span>arr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span><span class="token comment" spellcheck="true">//concat() 将两个数组连接起来，返回一个新数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['A', 'B', 'C', 1, 2, 3, 4]</span><span class="token comment" spellcheck="true">//join() 把当前数组的每个元素都用指定的字符串连接起来，然后返回连接后的字符串</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'A-B-C-1-2-3'</span></code></pre></li></ul><h2 id="四、对象"><a href="#四、对象" class="headerlink" title="四、对象"></a>四、对象</h2><ul><li><p>类似于Python的字典    </p></li><li><p>获取对象属性：对象变量.属性名，person.name</p></li><li><p>判断是否包含某个属性：</p><p>in操作符：继承的属性也算</p><p>hasOwnProperty(): 不包含继承的属性</p></li></ul><h2 id="五、strict模式"><a href="#五、strict模式" class="headerlink" title="五、strict模式"></a>五、strict模式</h2><blockquote><p>如果一个变量没有通过var声明就使用，则该变量就自动被声明为全局变量</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//启用strict</span><span class="token string">'use strict'</span><span class="token punctuation">;</span></code></pre><h2 id="六、map和set"><a href="#六、map和set" class="headerlink" title="六、map和set"></a>六、map和set</h2><ul><li><p>map</p><blockquote><p>代替对象存储键值数据，具有极快的查询速度</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'Adam'</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 覆盖掉上面的Adam值</span>m<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'Adam'</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'Adam'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 88</span></code></pre></li><li><p>set</p><blockquote><p>只存值，且值不会重复</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 重复元素被过滤</span><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Set &amp;#123;1, 2, 3, "3"&amp;#125;</span><span class="token comment" spellcheck="true">// 可以重复添加，但不会有效果</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Set &amp;#123;1, 2, 3, 4&amp;#125;</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Set &amp;#123;1, 2, 3, 4&amp;#125;</span></code></pre></li></ul><h2 id="七、常用方法"><a href="#七、常用方法" class="headerlink" title="七、常用方法"></a>七、常用方法</h2><ul><li><p>forEach()</p><blockquote><p>ES5.1标准引入,用于遍历可迭代对象</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'V'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span>a<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// map,参数分别为值，键和map</span><span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> key<span class="token punctuation">,</span> map<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// set,Set与Array类似，但Set没有索引，因此回调函数的前两个参数都是元素本身</span><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>element<span class="token punctuation">,</span> sameElement<span class="token punctuation">,</span> <span class="token keyword">set</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="八、函数"><a href="#八、函数" class="headerlink" title="八、函数"></a>八、函数</h2><ul><li><p>匿名函数：<code>function (x) &#123; ... &#125;</code></p></li><li><p>可以传入多于或少于函数定义的参数的个数</p></li><li><p>关键字arguments：将传入的参数保存为类似于Array</p></li><li><p>rest参数：rest参数写在最后，前面用<code>...</code>标识，用于将多出的参数保存到Array中</p></li><li><p>let关键字：用于声明局部变量，所声明的变量，只在<code>let</code>命令所在的代码块内有效</p></li><li><p>const: <code>const</code>来定义常量，<code>const</code>与<code>let</code>都具有块级作用域</p></li><li><p>解构赋值：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//直接对多个变量同时赋值</span><span class="token keyword">var</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'JavaScript'</span><span class="token punctuation">,</span> <span class="token string">'ES6'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> <span class="token punctuation">[</span>y<span class="token punctuation">,</span> z<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'JavaScript'</span><span class="token punctuation">,</span> <span class="token string">'ES6'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'JavaScript'</span><span class="token punctuation">,</span> <span class="token string">'ES6'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 忽略前两个元素，只对z赋值第三个元素</span></code></pre></li><li><p>闭包：返回值为函数的函数</p></li><li><p>箭头函数：相当于匿名函数</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">*</span> x <span class="token operator">+</span> y <span class="token operator">*</span> yx <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul><h2 id="九、需要注意的点"><a href="#九、需要注意的点" class="headerlink" title="九、需要注意的点"></a>九、需要注意的点</h2><ul><li>JavaScript引擎在行末自动添加分号</li><li>全局变量会绑定到<code>window</code>上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现</li><li>返回闭包时，返回函数不要引用任何循环变量，或者后续会发生变化的变量</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Flask Vue跨域配置</title>
      <link href="2020/10/27/%E9%85%8D%E7%BD%AEFlask+Vue%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
      <url>2020/10/27/%E9%85%8D%E7%BD%AEFlask+Vue%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<ul><li><h4 id="配置Flask"><a href="#配置Flask" class="headerlink" title="配置Flask"></a>配置Flask</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 安装flask_cors</span>pip install flask_cors<span class="token keyword">from</span> flask_cors <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#全局配置</span>CORS<span class="token punctuation">(</span>app<span class="token punctuation">,</span> supports_credentials<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><a id="more"></a></li><li><h4 id="配置Vue"><a href="#配置Vue" class="headerlink" title="配置Vue"></a>配置Vue</h4><p>1.找到config目录下的index.js，在proxyTable下添加配置信息:</p><pre class=" language-js"><code class="language-js"><span class="token string">'/api'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> target<span class="token punctuation">:</span> <span class="token string">'http://localhost:5000/'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//后端接口地址</span> changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">//是否允许跨越</span> pathRewrite<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token string">'^/api'</span><span class="token punctuation">:</span> <span class="token string">'http://localhost:5000/'</span> <span class="token comment" spellcheck="true">//路径重写</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/9403344-10e8372429b51b34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/300" alt="proxyTable配置.png"></p><p>  2.在axios中，请求地址改为：’api/xxx/xxx’<br><img src="https://upload-images.jianshu.io/upload_images/9403344-aaa1a996feda6586.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="url.png"></p><p>  至此，跨域问题解决。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>asyncio.Semaphore控制协程并发量</title>
      <link href="2020/10/14/Python%E4%BD%BF%E7%94%A8asyncio.Semaphore%E6%8E%A7%E5%88%B6%E5%8D%8F%E7%A8%8B%E5%B9%B6%E5%8F%91%E9%87%8F/"/>
      <url>2020/10/14/Python%E4%BD%BF%E7%94%A8asyncio.Semaphore%E6%8E%A7%E5%88%B6%E5%8D%8F%E7%A8%8B%E5%B9%B6%E5%8F%91%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time    : 2020/10/12 12:03</span><span class="token comment" spellcheck="true"># @Author  : Wanghairui</span><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> time<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 控制并发数 20</span>    sem <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>Semaphore<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span>asyncio<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>print_something<span class="token punctuation">(</span><span class="token string">"c"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> sem<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token operator">*</span>tasks<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"运行结束"</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> <span class="token punctuation">[</span>t<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> t <span class="token keyword">in</span> tasks<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    elapsed <span class="token operator">=</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>elapsed<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">print_something</span><span class="token punctuation">(</span>thing<span class="token punctuation">,</span> sem<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> sem<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>thing<span class="token punctuation">)</span>        <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"A"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 协程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python常用脚本</title>
      <link href="2020/04/22/Python%20%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC/"/>
      <url>2020/04/22/Python%20%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h3 id="计算文本文件中的行数"><a href="#计算文本文件中的行数" class="headerlink" title="计算文本文件中的行数"></a>计算文本文件中的行数</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span>r<span class="token string">'F:\data\12.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    count <span class="token operator">=</span> <span class="token number">1</span>    line <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> line<span class="token punctuation">:</span>        count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>        line <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span></code></pre><br/><h3 id="去除文本的空行"><a href="#去除文本的空行" class="headerlink" title="去除文本的空行"></a>去除文本的空行</h3><pre class=" language-python"><code class="language-python">file1 <span class="token operator">=</span> open<span class="token punctuation">(</span>r<span class="token string">'F:\data\11.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 要去掉空行的文件</span>file2 <span class="token operator">=</span> open<span class="token punctuation">(</span>r<span class="token string">"F:\data\12.txt"</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 生成没有空行的文件</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> file1<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> line <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">:</span>            line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>        file2<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    file1<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    file2<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><br/><h3 id="分割字符串，避免”XXXA-B-C-D-XXX”被-分割"><a href="#分割字符串，避免”XXXA-B-C-D-XXX”被-分割" class="headerlink" title="分割字符串，避免”XXXA,B,C,D-XXX”被(,)分割"></a>分割字符串，避免”XXXA,B,C,D-XXX”被(,)分割</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 单独取出要避免的字符串</span>str <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">"\"(.+?)\""</span><span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 用(~)替换要避免的字符串中的(,)</span>strs <span class="token operator">=</span> strs<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'~'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 用(#)代替所有字符串中(,)</span>line <span class="token operator">=</span> line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 把要避免的字符串中的(~)换回(,)</span>strs <span class="token operator">=</span> strs<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'~'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将strs替换回长字符串</span>line <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">"\"(.+?)\""</span><span class="token punctuation">,</span> strs<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 根据（#）进行分割</span>line_list <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span></code></pre><br/>  <h3 id="将列表字符串转为列表"><a href="#将列表字符串转为列表" class="headerlink" title="将列表字符串转为列表"></a>将列表字符串转为列表</h3><blockquote><p>列表中字符串必须被双引号包裹</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> jsonlist_test <span class="token operator">=</span> <span class="token string">'["wang","hai","rui"]'</span>list_test <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>list_test<span class="token punctuation">)</span></code></pre><br/>  <h3 id="Python-发送邮件"><a href="#Python-发送邮件" class="headerlink" title="Python 发送邮件"></a>Python 发送邮件</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> smtplib<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMEText<span class="token keyword">from</span> email<span class="token punctuation">.</span>header <span class="token keyword">import</span> Header<span class="token keyword">import</span> logging<span class="token keyword">def</span> <span class="token function">send_notice</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> subject<span class="token operator">=</span><span class="token string">"邮件主题"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 第三方 SMTP 服务</span>    mail_host <span class="token operator">=</span> <span class="token string">"smtp.qq.com"</span>  <span class="token comment" spellcheck="true"># 设置服务器</span>    mail_user <span class="token operator">=</span> <span class="token string">"4145xx491@qq.com"</span>  <span class="token comment" spellcheck="true"># 用户名</span>    mail_pass <span class="token operator">=</span> <span class="token string">"xxxxxxx"</span>  <span class="token comment" spellcheck="true"># 口令</span>    sender <span class="token operator">=</span> <span class="token string">'414528491@qq.com'</span>    receivers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'xxxx@metajoy.io'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 接收邮件</span>    message <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token string">'plain'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    message<span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span><span class="token string">"sys"</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    message<span class="token punctuation">[</span><span class="token string">'To'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span><span class="token string">"wanghairui"</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    message<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        smtpObj <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span><span class="token punctuation">)</span>        smtpObj<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>mail_host<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span>        smtpObj<span class="token punctuation">.</span>login<span class="token punctuation">(</span>mail_user<span class="token punctuation">,</span> mail_pass<span class="token punctuation">)</span>        smtpObj<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>sender<span class="token punctuation">,</span> receivers<span class="token punctuation">,</span> message<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"邮件发送成功"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> smtplib<span class="token punctuation">.</span>SMTPException <span class="token keyword">as</span> e<span class="token punctuation">:</span>        logging<span class="token punctuation">.</span>exception<span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error: 无法发送邮件"</span><span class="token punctuation">)</span></code></pre><br/><h3 id="Requests不使用代理"><a href="#Requests不使用代理" class="headerlink" title="Requests不使用代理"></a>Requests不使用代理</h3><pre class=" language-python"><code class="language-python">proxies <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'http': None, 'https': None&amp;#125;</span>respon<span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">,</span> data<span class="token operator">=</span>param_form<span class="token punctuation">,</span> proxies<span class="token operator">=</span>proxies<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>插入排序</title>
      <link href="2019/11/07/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
      <url>2019/11/07/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><hr><hr><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><ul><li>从序列中不断取出元素，插入已排序的序列中</li><li>时间复杂度：最好O(N),最坏O(N^2)</li></ul><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author Mr.wang * @date 2019-11-07 15:07 * function_: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InsertSort</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> list<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> k<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将比现在大的元素向后移</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> list<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> tmp<span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                list<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            list<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> list <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token function">insertSort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归并排序</title>
      <link href="2019/11/07/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
      <url>2019/11/07/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="归并排序-Merge"><a href="#归并排序-Merge" class="headerlink" title="归并排序 (Merge)"></a>归并排序 (Merge)</h2><hr><hr><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><ul><li>通过分而治之的思想，将两个两个的有序子列进行归并</li><li>时间复杂度：稳定在nlogn</li><li>优点：稳定的算法</li><li>缺点：比较占用内存</li></ul><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author Mr.wang * @date 2019-11-07 09:11 * function_:归并排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MergeSort</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        MergeSort m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MergeSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>a<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> a<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmp<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> le <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>le <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> m <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>le<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                tmp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>le<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                tmp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>m<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//当左右两边仍有剩余时</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>le <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            tmp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>le<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            tmp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>m<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//复制回原数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>left<span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmp<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token function">mergeSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">mergeSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">merge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> end<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li><a href="https://www.nowcoder.com/pat/5/problem/4037" title="Insert or Merge">Insert or Merge</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程基础二</title>
      <link href="2019/11/06/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%802/"/>
      <url>2019/11/06/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%802/</url>
      
        <content type="html"><![CDATA[<h2 id="Java并发编程基础二"><a href="#Java并发编程基础二" class="headerlink" title="Java并发编程基础二"></a>Java并发编程基础二</h2><hr><hr><h4 id="1、多线程并发编程"><a href="#1、多线程并发编程" class="headerlink" title="1、多线程并发编程"></a>1、多线程并发编程</h4><ul><li>并发：同一时间段内多个任务同时执行，且执行没有结束</li><li>并行：单位时间内多个任务同时执行</li></ul><hr><h4 id="2、线程安全问题"><a href="#2、线程安全问题" class="headerlink" title="2、线程安全问题"></a>2、线程安全问题</h4><ul><li>只读不会出现问题，至少有一个线程进行修改</li><li>通常使用同步锁synchronized进行上锁</li></ul><hr><h4 id="3、共享变量的内存可见性问题"><a href="#3、共享变量的内存可见性问题" class="headerlink" title="3、共享变量的内存可见性问题"></a>3、共享变量的内存可见性问题</h4><ul><li>变量放在主内存中，线程使用变量时，会将主内存中变量复制到自己的工作空间，然后操作自己工作空间中的变量</li><li>通过volatile解决</li></ul><hr><h4 id="4、synchronized关键字"><a href="#4、synchronized关键字" class="headerlink" title="4、synchronized关键字"></a>4、synchronized关键字</h4><ul><li>当一个线程获取到这个锁后，其他线程必须等待该线程释放锁后才能获取该锁</li><li>使用synchronized就是将要使用的变量从工作内存中清除，直接从主存中获取变量</li><li>退出synchronized就是将本地内存修改的变量刷新到主存中</li><li>使用synchronized会导致上下文切换，增加调度开销<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> set（<span class="token keyword">int</span> value）<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul><hr><h4 id="5、volatile关键字"><a href="#5、volatile关键字" class="headerlink" title="5、volatile关键字"></a>5、volatile关键字</h4><ul><li>确保对一个变量的更新对其他线程马上可见</li><li>从主内存中获取，修改后再刷新回主内存</li><li>不保证操作的原子性</li><li>适合的使用条件<ul><li>写入变量值不依赖变量当前值</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> value；</code></pre><hr><h4 id="6、原子性操作"><a href="#6、原子性操作" class="headerlink" title="6、原子性操作"></a>6、原子性操作</h4><ul><li>含义：执行一系列操作时，这些操作要么全执行，要么全不执行</li><li>保证原子性：通过synchronized关键字</li></ul><hr><h4 id="7、CAS操作"><a href="#7、CAS操作" class="headerlink" title="7、CAS操作"></a>7、CAS操作</h4><ul><li>锁的缺点：当线程没有获取到锁被阻塞时，会导致线程上下文切换和重新调度的开销</li><li>CAS：Compare and Swap，通过硬件保证原子性</li><li>boolean compareAndSwapLong（Object obj，long valueOffset，long expect，long update），参数为：对象内存位置、对象中变量的偏移量、变量预期值、新的值。如果对象obj中内存偏移量为valueOffset的变量值为expect，则使用新的值update替换expect</li></ul><h5 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h5><pre><code>- 线程1准备用CAS将变量的值由A替换为B，在此之前，线程2将变量的值由A替换为C，又由C替换为A，然后线程1执行CAS时发现变量的值仍然为A，所以CAS成功。但实际上这时的现场已经和最初不同了，尽管CAS成功，但可能存在潜藏的问题- 变量的状态值产生了环形转换     A-&gt;B,B-&gt;A- 避免：    + 1、变量的值只能朝一个方向转换    A-&gt;B,B-&gt;C    + 2、JDK中AtomicStampedReference类给每个变量状态值配备了时间戳</code></pre><hr><h4 id="8、Unsafe类"><a href="#8、Unsafe类" class="headerlink" title="8、Unsafe类"></a>8、Unsafe类</h4><hr><h4 id="9、Java指令重排序"><a href="#9、Java指令重排序" class="headerlink" title="9、Java指令重排序"></a>9、Java指令重排序</h4><hr><h4 id="10、伪共享"><a href="#10、伪共享" class="headerlink" title="10、伪共享"></a>10、伪共享</h4><hr><h4 id="11、锁"><a href="#11、锁" class="headerlink" title="11、锁"></a>11、锁</h4><h5 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h5><h5 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h5><h5 id="独占锁和共享锁"><a href="#独占锁和共享锁" class="headerlink" title="独占锁和共享锁"></a>独占锁和共享锁</h5><hr>]]></content>
      
      
      <categories>
          
          <category> Java并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用操作</title>
      <link href="2019/10/28/git/"/>
      <url>2019/10/28/git/</url>
      
        <content type="html"><![CDATA[<h3 id="git常用操作"><a href="#git常用操作" class="headerlink" title="git常用操作"></a>git常用操作</h3><h4 id="本地项目同步到github"><a href="#本地项目同步到github" class="headerlink" title="本地项目同步到github"></a>本地项目同步到github</h4><pre><code>github上创建同名项目库git initgit add .git commit –m “”git remote add origin     https://github.com/OneSoil/PAT.git(项目地址)git push –u origin master (-f  强制push)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 指令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程基础一</title>
      <link href="2019/10/16/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
      <url>2019/10/16/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="Java并发编程基础一"><a href="#Java并发编程基础一" class="headerlink" title="Java并发编程基础一"></a>Java并发编程基础一</h2><hr><hr><br/>#### 线程定义    线程是进程的一个执行路径，一个进程中至少有一个线程，进程中的多个线程共享进程的资源    线程中有程序计数器和栈，程序计数器记录要执行的指令地址，栈存放该线程的局部变量***<br/>#### 线程创建和运行##### 线程的创建<pre><code> 1. 实 现Runnable接口的run()方法 2. 继承Theread类，重写run方法 3. 使用FutureTask</code></pre><h5 id="三种方式比较"><a href="#三种方式比较" class="headerlink" title="三种方式比较"></a>三种方式比较</h5><pre><code>通过继承：方便传参，但不支持多继承通过Runnable：可以实现多接口，但不方便传参通过FutureTask：可以拿到任务的返回结果</code></pre><h5 id="线程的运行"><a href="#线程的运行" class="headerlink" title="线程的运行"></a>线程的运行</h5><blockquote><ul><li>通过继承Theread类，当调用了start()方法后才真正启动了线程</li><li>当run方法执行完毕后，线程就处于终止状态</li></ul></blockquote><hr><br/>#### 线程等待和通知##### wait()    * 调用wait前需获取当前变量监视器锁synchronized    * 使用wait后线程进入阻塞，并释放当前变量监视器锁虚假唤醒：没有使用notify()、notifyAll()，线程也从挂起状态转变为运行状态 ```java//预防虚假唤醒synchronized(obj){    while (条件不满足){        obj.wait（）；    }}```<h5 id="wait-long-timeout"><a href="#wait-long-timeout" class="headerlink" title="wait(long timeout)"></a>wait(long timeout)</h5><pre><code>在指定时间挂起，超时后则结束并返回;wait()方法执行的是wait(0);</code></pre><h5 id="wait-long-timeout-int-nanos"><a href="#wait-long-timeout-int-nanos" class="headerlink" title="wait(long timeout,int nanos)"></a>wait(long timeout,int nanos)</h5><pre><code>在wait(long timeout)的基础上加入了纳秒级的额外时间</code></pre><h5 id="notify"><a href="#notify" class="headerlink" title="notify()"></a>notify()</h5><pre><code>唤醒一个在该共享变量上调用wait系列方法后被挂起的线程，若存在多个线程等待，则唤醒是随机的在唤醒前需获得其共享变量的监视器锁</code></pre><h5 id="notifyAll"><a href="#notifyAll" class="headerlink" title="notifyAll()"></a>notifyAll()</h5><pre><code>唤醒所有在该共享变量上调用了wait()方法后而被挂起的线程只能唤醒调用notifyAll前由于wait而挂起的线程</code></pre><hr><h4 id="4、等待线程执行终止"><a href="#4、等待线程执行终止" class="headerlink" title="4、等待线程执行终止"></a>4、等待线程执行终止</h4><h5 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h5><ul><li>通过Thread类直接提供</li><li>该方法无参无返回值</li></ul><hr><h4 id="5、sleep"><a href="#5、sleep" class="headerlink" title="5、sleep()"></a>5、sleep()</h4><ul><li>线程在睡眠时不会释放监视器资源</li></ul><hr><p>####6、 yield()</p><ul><li>让出CPU执行权</li><li>sleep()让自己阻塞起来，yield使自己处于就绪状态<br/></li></ul><hr><h4 id="7、线程中断方法"><a href="#7、线程中断方法" class="headerlink" title="7、线程中断方法"></a>7、线程中断方法</h4><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>void interrupt()</td><td>设置线程的中断标志。当阻塞时调用，会抛出InterruptedException异常</td></tr><tr><td>boolean isInterrupted()</td><td>检测当前线程是否被中断，是返回true</td></tr><tr><td>boolean interrupted()</td><td>检测当前线程是否被中断，是返回true，不过如果发现被中断，会清除中断标志</td></tr></tbody></table><hr><h4 id="8、线程上下文切换"><a href="#8、线程上下文切换" class="headerlink" title="8、线程上下文切换"></a>8、线程上下文切换</h4><ul><li>当前线程使用完时间片后，让出CPU供其他线程占用的过程</li><li>需要保存现场</li><li>切换时机<ul><li>当前线程的CPU时间片用完处于就绪状态</li><li>当前线程被其他线程中断时</li></ul></li></ul><hr><h4 id="9、线程死锁"><a href="#9、线程死锁" class="headerlink" title="9、线程死锁"></a>9、线程死锁</h4><ul><li>产生条件<ul><li>1.互斥条件</li><li>2.请求并持有条件</li><li>3.不可剥夺条件</li><li>4.环路等待条件<br/></li></ul></li><li>避免死锁<ul><li>破坏一个条件（请求并持有、环路等待）</li><li>使资源的申请有序性(使多个线程获取资源的顺序一致)</li></ul></li></ul><hr><h4 id="10、守护线程和用户线程"><a href="#10、守护线程和用户线程" class="headerlink" title="10、守护线程和用户线程"></a>10、守护线程和用户线程</h4><h5 id="守护线程daemon"><a href="#守护线程daemon" class="headerlink" title="守护线程daemon"></a>守护线程daemon</h5><ul><li>不影响JVM退出</li><li>通过daemonThread.setDaemon(true)设置守护线程<h5 id="用户线程user"><a href="#用户线程user" class="headerlink" title="用户线程user"></a>用户线程user</h5></li><li>所有用户线程结束时，JVM正常退出，如main函数</li></ul><hr><h4 id="11、ThreadLocal"><a href="#11、ThreadLocal" class="headerlink" title="11、ThreadLocal"></a>11、ThreadLocal</h4><ul><li>每个线程通过复制一个变量到自己的本地内存</li><li>创建<pre class=" language-java"><code class="language-java">ThreadLocal<span class="token operator">&lt;</span>String<span class="token operator">></span> localVariable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的深度</title>
      <link href="2019/10/15/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6/"/>
      <url>2019/10/15/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度</p></blockquote><br/>#### 要点<ul><li>通过递归，比较左右结点最大深度</li><li>三元表达式  exception ？ result1 : result2<br/></li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**public class TreeNode &amp;#123;    int val = 0;    TreeNode left = null;    TreeNode right = null;    public TreeNode(int val) &amp;#123;        this.val = val;    &amp;#125;&amp;#125;*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">TreeDepth</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">TreeDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">TreeDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> left <span class="token operator">></span> right <span class="token operator">?</span> left <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>连续子数组的最大和</title>
      <link href="2019/09/05/%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C/"/>
      <url>2019/09/05/%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长度至少是1)</p></blockquote><br/>#### 问题分析<ul><li>通过遍历数组，一个一个进行处理</li><li>将第一个数记录为最大值</li><li>从第一个加到最后，当比最大值大时，更新最大值</li><li>当前和为负数时，则下个数为开始值</li></ul><br/><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">FindGreatestSumOfSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                j <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                j <span class="token operator">=</span> j <span class="token operator">+</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">&lt;</span> j<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    max <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从尾到头打印链表</title>
      <link href="2019/09/05/%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
      <url>2019/09/05/%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>输入一个链表，按链表从尾到头的顺序返回一个ArrayList</p></blockquote><br/>#### 问题分析<ul><li>先将链表数据全部压入栈中</li><li>通过运用栈后入先出的性质</li><li>即可将数据反转</li></ul><br/>#### 知识点* ArrayList<Integer> list = new ArrayList<Integer>();* stack.push() || pop()* list.add(value);<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/***    public class ListNode &amp;#123;*        int val;*        ListNode next = null;**        ListNode(int val) &amp;#123;*            this.val = val;*        &amp;#125;*    &amp;#125;**/</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Stack<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">printListFromTailToHead</span><span class="token punctuation">(</span>ListNode listNode<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将链表中的数据压入栈中</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>listNode<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            listNode <span class="token operator">=</span> listNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将栈中数据返回给ArrayList</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用两个栈实现队列</title>
      <link href="2019/09/04/%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
      <url>2019/09/04/%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p></blockquote><br/>#### 问题分析- push    + 通过两个栈，两次颠倒顺序即可变为队列    ![avatar](/img/19_9_4.png)<ul><li>pop<ul><li>在push的基础上直接pop（）即可<br/></li></ul></li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Stack<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 队列 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>替换空格</title>
      <link href="2019/09/04/%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
      <url>2019/09/04/%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p></blockquote><br/>#### 问题分析- 通过java字符串自带的方法实现<br/><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">replaceSpace</span><span class="token punctuation">(</span>StringBuffer str<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">"%20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo指令</title>
      <link href="2019/07/27/hexo%E6%8C%87%E4%BB%A4/"/>
      <url>2019/07/27/hexo%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo指令"><a href="#hexo指令" class="headerlink" title="hexo指令"></a>hexo指令</h2><h5 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h5><pre><code>hexo ghexo shttp://localhost:4000/</code></pre><h5 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h5><pre><code>hexo cleanhexo ghexo d</code></pre>]]></content>
      
      
      <categories>
          
          <category> 指令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛顿迭代法求平方根</title>
      <link href="2019/07/27/%E7%89%9B%E9%A1%BF%E6%B3%95%E6%B1%82%E5%B9%B3%E6%96%B9%E6%A0%B9/"/>
      <url>2019/07/27/%E7%89%9B%E9%A1%BF%E6%B3%95%E6%B1%82%E5%B9%B3%E6%96%B9%E6%A0%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="x-的平方根"><a href="#x-的平方根" class="headerlink" title="x 的平方根"></a>x 的平方根</h2><h4 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h4><h5 id="牛顿迭代法"><a href="#牛顿迭代法" class="headerlink" title="牛顿迭代法"></a>牛顿迭代法</h5><ul><li>求x的平方根即求f(x)=x^2-a等于0的解，</li><li>通过点x的直线于曲线，在无限趋近于x的时候，直线与曲线近似相等</li><li>点x处切线交x轴于x0</li><li>作x0的垂线交曲线与(x0,f(x0))</li><li>通过反复迭代求得x的平方根近似值</li></ul><h4 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h4><p>实现 int sqrt(int x) 函数。<br/></p><p>计算并返回 x 的平方根，其中 x 是非负整数。<br/></p><p>由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。<br/></p>  <br/><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre><code>输入: 4输出: 2输入: 8输出: 2说明: 8 的平方根是 2.82842..., 由于返回类型是整数，小数部分将被舍去。  </code></pre><br/><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4> <br/><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">mySqrt</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">long</span> a <span class="token operator">=</span> x<span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> a <span class="token operator">></span> x<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           a <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> x <span class="token operator">/</span> a<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>queue</title>
      <link href="2019/07/09/queue/"/>
      <url>2019/07/09/queue/</url>
      
        <content type="html"><![CDATA[<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="循化队列"><a href="#循化队列" class="headerlink" title="循化队列"></a>循化队列</h3><ul><li><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyCircularQueue</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> head<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> tail<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Initialize your data structure here. Set the size of the queue to be k. */</span>    <span class="token keyword">public</span> <span class="token function">MyCircularQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        tail <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> k<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Insert an element into the circular queue. Return true if the operation is successful. */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">enQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        tail <span class="token operator">=</span> <span class="token punctuation">(</span>tail <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> size<span class="token punctuation">;</span>        data<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Delete an element from the circular queue. Return true if the operation is successful. */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">deQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> tail<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            tail <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> size<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Get the front item from the queue. */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">Front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> data<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Get the last item from the queue. */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">Rear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> data<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Checks whether the circular queue is empty or not. */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> head <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Checks whether the circular queue is full or not. */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tail <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> size<span class="token punctuation">)</span> <span class="token operator">==</span> head<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Your MyCircularQueue object will be instantiated and called as such: * MyCircularQueue obj = new MyCircularQueue(k); * boolean param_1 = obj.enQueue(value); * boolean param_2 = obj.deQueue(); * int param_3 = obj.Front(); * int param_4 = obj.Rear(); * boolean param_5 = obj.isEmpty(); * boolean param_6 = obj.isFull(); */</span></code></pre><ul><li><h5 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h5><ul><li>在插入时，必须先判断full，再判断empty，因为empty会改变head的值。</li><li>使用取余操作避免数组溢出<br><br></li></ul></li></ul><h3 id="Java-队列api"><a href="#Java-队列api" class="headerlink" title="Java 队列api"></a>Java 队列api</h3><hr><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><ul><li><strong>boolean add (E e)</strong></li></ul><pre><code> 将指定的元素插入此队列（如果立即可行且不会违反容量限制），在成功时返回 true，如果当前没有可用的空间，则抛出 IllegalStateException</code></pre><br><ul><li><strong>boolean offer (E e)</strong></li></ul><pre><code> 将指定的元素插入此队列（如果立即可行且不会违反容量限制），当使用有容量限制的队列时，此方法通常要优于 add(E)，后者可能无法插入元素，而只是抛出一个异常</code></pre><ul><li><strong>区别</strong></li></ul><ul><li> add抛出异常</li><li>offer直接返回false<br></li></ul><hr><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><ul><li><strong>E remove()</strong></li></ul><pre><code> 获取并移除此队列的头。此方法与 poll 唯一的不同在于：此队列为空时将抛出一个异常</code></pre><br><ul><li><strong>E poll()</strong></li></ul><pre><code>获取并移除此队列的头，如果此队列为空，则返回 null </code></pre><br><hr><h4 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h4><ul><li><strong>E element()</strong></li></ul><pre><code>获取，但是不移除此队列的头。此方法与 peek 唯一的不同在于：此队列为空时将抛出一个异常</code></pre><br><ul><li><strong>E peek()</strong></li></ul><pre><code>获取但不移除此队列的头；如果此队列为空，则返回 null</code></pre><br>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二维数组中的查找</title>
      <link href="2019/07/09/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
      <url>2019/07/09/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><blockquote><p>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p></blockquote><br/>#### 问题分析- 通过左下角(第一列最大，最后一行最小)与target进行比较;- 左下角下标为array[array.length][0]，行最大为array[0].length;- 若target较大，则向右移一位- 若target较小，则向上移一位<br/><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>array <span class="token operator">==</span> null<span class="token operator">||</span>array<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bottom <span class="token operator">=</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>bottom <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">></span> array<span class="token punctuation">[</span>bottom<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>bottom<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                bottom<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉搜索树</title>
      <link href="2019/04/24/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
      <url>2019/04/24/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="二叉搜索树（BST）"><a href="#二叉搜索树（BST）" class="headerlink" title="二叉搜索树（BST）"></a>二叉搜索树（BST）</h2><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>一颗二叉树可以为空，当不为空时：</p><ul><li><p>非空左子树的所有键值小于其根节点的键值</p></li><li><p>非空右子树的所有键值大于其根节点的键值</p></li><li><p>左右子树都是二叉搜索树 </p><br/></li></ul><h4 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h4><h5 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h5><ul><li>树为空时，返回null</li><li>树非空，与根结点关键字比较</li><li>最大最小查找，找最右最左的元素</li></ul><h5 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h5><ul><li>与根结点比较，直到根结点子树为空</li></ul><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><ul><li>叶结点：直接删除</li><li>只有一个孩子结点：直接删除，将被删除结点的子节点指向被删除结点的父结点</li><li>有两个孩子结点：用右子树最小元素或左子树最大元素代替被删除结点</li></ul><p>可视化演示地址：<code>https://visualgo.net/zh/bst</code></p><br/><h4 id="相应函数"><a href="#相应函数" class="headerlink" title="相应函数"></a>相应函数</h4><p>查找- -递归实现<code>FindByRec</code><br>查找- -非递归实现<code>FindByFuc</code><br> <br/></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author Mr.wang * @date 2019-04-24 20:35 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BST</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Node root<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//二叉搜索树的根结点</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> val<span class="token punctuation">;</span>        <span class="token keyword">private</span> Node left<span class="token punctuation">;</span>        <span class="token keyword">private</span> Node right<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> Node left<span class="token punctuation">,</span> Node right<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 查找     * --递归实现     */</span>    <span class="token keyword">public</span> Node <span class="token function">FindByRec</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">FindByRec</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Node <span class="token function">FindByRec</span><span class="token punctuation">(</span>Node node<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">></span> value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">FindByRec</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">FindByRec</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> node<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    *查找    * 非递归    */</span>    <span class="token keyword">public</span> Node <span class="token function">FindByFuc</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">FindByFuc</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Node <span class="token function">FindByFuc</span><span class="token punctuation">(</span>Node node<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val <span class="token operator">></span> value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                  node <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> node<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
